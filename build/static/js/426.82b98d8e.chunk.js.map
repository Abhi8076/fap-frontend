{"version":3,"file":"static/js/426.82b98d8e.chunk.js","mappings":"oPAGA,MAqBA,EArBsBA,IACpB,MAAM,MAACC,EAAK,OAAEC,EAAM,aAAEC,GAAgBH,EACtC,OACEI,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CACFC,EAAE,OACFC,EAAE,OACFC,EAAE,IACFC,EAAE,YACFC,GAAG,UAASC,SAAA,EAEhBP,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACG,EAAE,SAASI,IAAI,OAAMD,SAAA,EAC5BE,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,KAAM,GAAIC,MAAM,OAAOC,QAASf,KAC3CW,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAACC,GAAG,OAAOC,GAAG,OAAOC,GAAG,MAAMC,GAAG,QAAQC,EAAE,OAAOC,GAAG,OAAMb,SACjEV,OAGNE,IACO,ECpBDsB,EAAe,CAC1B,QAAW,SACX,OAAU,SACV,KAAQ,OACR,KAAQ,QACR,UAAa,O,sGCEf,MAAMC,EAAgBC,MAAQC,UAmU9B,EAjUuB5B,IACnB,MAAM,KAAE6B,EAAI,QAAEC,EAAO,YAAEC,EAAW,SAAEC,EAAQ,UAAEC,EAAS,YAAEC,GAAgBlC,GAClEmC,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChCC,EAAaC,IAAkBF,EAAAA,EAAAA,UAAS,IACxCG,GAAQC,EAAAA,EAAKC,UAkCdC,EAAkBA,KACpB,MAAMC,EAAYJ,EAAKK,cAAc,aACrC,IAAIC,EAAQ,EACZ,IAAK,MAAMC,KAAQH,EAAW,CAC1B,MAAM,SAAEI,EAAQ,KAAEC,GAASF,EAC3BD,GAASG,GAAQD,EAAWC,EAAOD,EAAW,CAClD,CACAT,EAAeO,EAAM,EAGnBI,EAAaA,KACfV,EAAKW,cACLrB,GAAS,EAGb,OACI1B,EAAAA,EAAAA,MAACgD,EAAAA,EAAK,CACFnD,MAAM,YACNoD,OAAQ,KACRlB,QAASA,EACTN,KAAMA,EACNyB,SAAUJ,EACVK,OAAQ,CAAEC,QAAS,CAAEC,QAAS,SAC9BC,MAAO,CAACC,IAAK,QAAQhD,SAAA,EAErBP,EAAAA,EAAAA,MAACwD,EAAAA,GAAS,CAACC,IAAI,WAAWF,IAAI,OAAOG,MAAM,OAAOvC,EAAE,YAAYmC,MAAO,CAACK,WAAY,MAAOC,SAAU,QAAQrD,SAAA,CAAC,mBAAWsD,EAAAA,EAAAA,IAAU3B,OACnIlC,EAAAA,EAAAA,MAACqC,EAAAA,EAAI,CACDD,KAAMA,EACN0B,SAAU,CAAEC,GAAI,CAAEC,KAAM,IAAMC,GAAI,CAAED,KAAM,IAC1CE,WAAY,CAAEH,GAAI,CAAEC,KAAM,IAAMC,GAAI,CAAED,KAAM,KAC5CG,cAAe,CACXC,SAAU,QACVC,KAAM/C,GAEVgD,OAAO,aACP3D,KAAK,SACL2C,MAAO,CACHiB,SAAU,IACVC,OAAQ,eAEZC,SAxEKC,UAAmB,IAADC,EAC/B3C,GAAW,GACX,MAAM4C,EAAU,CACZC,UAAW,CACPC,UAAWC,EAAOD,UAClBE,QAASD,EAAOC,QAChBZ,SAAUW,EAAOX,UAErB5B,UAA2B,QAAlBmC,EAAEI,EAAOvC,iBAAS,IAAAmC,OAAA,EAAhBA,EAAkBM,KAAKtC,IACvB,CACHuC,OAAQvC,EAAKuC,OACbC,KAAM,aACNvC,SAAUD,EAAKC,SACfwC,KAAMzC,EAAKyC,KACXvC,KAAMF,EAAKE,KACXwC,UAAW1C,EAAKC,SAAWD,EAAKE,SAGxCyC,WAAYP,EAAOO,YAEvB,SCIqBV,KACzB,MAAMW,EAAM,GAAGC,EAAAA,8BAEf,OAAOC,EAAAA,EAAAA,IAAQ,CACXF,IAAKA,EACLG,OAAQ,OACRC,KAAMf,EACNgB,QAAS,CACL,eAAgB,qBAEtB,EDbYC,CAAajB,GACnBkB,EAAAA,GAAQC,QAAQ,iCAChBjE,IACAgB,GACJ,CAAE,MAAOkD,IACLC,EAAAA,EAAAA,IAAYD,EAChB,CAAC,QACGhE,GAAW,EACf,GA2C2BzB,SAAA,EAEnBE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK6D,KAAI,CACNC,KAAK,OACLjC,WAAY,CAAEF,KAAM,IACpBV,MAAO,CAAE8C,UAAW,SACpBC,MAAO,CACH,CACIC,UAAU,IAGlBC,cAAgBC,IAAK,CACjBA,MAAOA,GAASjF,IAAMkF,OAAOD,MAEjCE,UAAYF,GAAUA,GAAS,GAAGjF,IAAMiF,GAAOhF,YAAYjB,UAE3DE,EAAAA,EAAAA,KAACkG,EAAAA,EAAU,CAACC,OAAO,kBAEvBnG,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK6D,KAAI,CAACC,KAAK,YAAYjC,WAAY,CAAEF,KAAM,IAAMqC,MAAO,CAAC,CAAEC,UAAU,EAAMR,QAAS,8BAA+BvF,UACpHE,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACHC,YAAU,EACVC,YAAY,kBACZC,iBAAiB,QACjBC,WAAYA,CAACC,EAASC,KAAO,IAAAC,EAAAC,EAAA,OACV,QAAfD,EAAQ,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASI,aAAK,IAAAF,EAAAA,EAAI,IAAIG,cAAcC,eAA6B,QAAfH,EAAQ,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASG,aAAK,IAAAD,EAAAA,EAAI,IAAIE,cAAc,EAE5FE,QAAS9F,OAGjBlB,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK6D,KAAI,CACNC,KAAK,WACLmB,MAAM,YACNjB,MAAO,CACH,CACIC,UAAU,EACVR,QAAS,yBAEfvF,UACFP,EAAAA,EAAAA,MAAC0H,EAAAA,GAAAA,MAAW,CAAAnH,SAAA,EACRE,EAAAA,EAAAA,KAACiH,EAAAA,GAAAA,OAAY,CAAClB,MAAM,QAAOjG,SAAC,WAC5BE,EAAAA,EAAAA,KAACiH,EAAAA,GAAAA,OAAY,CAAClB,MAAM,aAAYjG,SAAC,qBAGzCE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK6D,KAAI,CACNyB,SAAO,EACPC,aAAcA,CAACC,EAAYC,IAAkBD,EAAWzD,WAAa0D,EAAc1D,SAAS7D,SAE3FwH,IAAA,IAAC,cAAEtF,GAAesF,EAAA,MACe,eAA9BtF,EAAc,aACVhC,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK6D,KAAI,CAACC,KAAK,UAAUmB,MAAM,QAAO/G,UACnCE,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACHC,YAAU,EACVC,YAAY,eACZC,iBAAiB,QACjBgB,uBAAuB,EACvBf,WAAYA,CAACC,EAASC,KAAO,IAAAc,EAAAC,EAAA,OACV,QAAfD,EAAQ,OAAPf,QAAO,IAAPA,OAAO,EAAPA,EAASI,aAAK,IAAAW,EAAAA,EAAI,IAAIV,cAAcC,eAA6B,QAAfU,EAAQ,OAAPf,QAAO,IAAPA,OAAO,EAAPA,EAASG,aAAK,IAAAY,EAAAA,EAAI,IAAIX,cAAc,EAE5FE,QAAS5F,MAGjB,IAAI,KAEhBpB,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK8F,KAAI,CACNhC,KAAK,YACLE,MAAO,CACH,CACI+B,UAAW1D,MAAO2D,EAAGC,KACjB,IAAKA,GAASA,EAAMC,OAAS,EACzB,OAAOC,QAAQC,OAAO,IAAIC,MAAM,mBACpC,IAGVnI,SAEDA,CAACoI,EAAMC,EAAAC,KAAA,IAAE,IAAEC,EAAG,OAAEC,GAAQH,GAAE,OAAEI,GAAQH,EAAA,OACjC7I,EAAAA,EAAAA,MAAAiJ,EAAAA,SAAA,CAAA1I,SAAA,CACKoI,EAAO1D,KAAIiE,IAAA,IAAC,IAAEC,EAAG,KAAEhD,KAASiD,GAAWF,EAAA,OACpClJ,EAAAA,EAAAA,MAACqJ,EAAAA,EAAK,CAEF/F,MAAO,CACHgG,QAAS,QAEbC,MAAM,WAAUhJ,SAAA,EAEhBE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK6D,KAAI,IACFkD,EACJjD,KAAM,CAACA,EAAM,UACbjC,WAAY,CAAEF,KAAM,IACpBqC,MAAO,CACH,CACIC,UAAU,EACVR,QAAS,iBAEfvF,UAEFE,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACHC,YAAU,EACVC,YAAY,QACZC,iBAAiB,QACjBgB,uBAAuB,EACvBf,WAAYA,CAACC,EAASC,KAAO,IAAAqC,EAAAC,EAAA,OACV,QAAfD,EAAQ,OAAPtC,QAAO,IAAPA,OAAO,EAAPA,EAASI,aAAK,IAAAkC,EAAAA,EAAI,IAAIjC,cAAcC,eAA6B,QAAfiC,EAAQ,OAAPtC,QAAO,IAAPA,OAAO,EAAPA,EAASG,aAAK,IAAAmC,EAAAA,EAAI,IAAIlC,cAAc,EAE5FE,QAAS7F,EACT0B,MAAO,CAAEoG,MAAO,OAAQnF,SAAU,aAI1C9D,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK6D,KAAI,IACFkD,EACJjD,KAAM,CAACA,EAAM,YACbjC,WAAY,CAAEF,KAAM,IACpBqC,MAAO,CACH,CACIC,UAAU,EACVR,QAAS,qBAEfvF,UAEFE,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,CAAC5C,YAAY,MAAM5B,KAAK,SAAS7B,MAAO,CAAEsG,aAAc,GAAKC,SAAUtH,OAEjF9B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK6D,KAAI,IACFkD,EACJjD,KAAM,CAACA,EAAM,QACbjC,WAAY,CAAEF,KAAM,IACpBqC,MAAO,CACH,CACIC,UAAU,EACVR,QAAS,iBAGjBgE,aAAc,KAAKvJ,UAEnBE,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACHE,YAAY,QACZzD,MAAO,CAAEoG,MAAO,QAASnJ,SAExBwJ,EAAAA,GAAU9E,KAAIG,IACX3E,EAAAA,EAAAA,KAACoG,EAAAA,EAAOmD,OAAM,CAAYxD,MAAOpB,EAAK7E,SAAE6E,GAApBA,UAIhC3E,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK6D,KAAI,IACFkD,EACJjD,KAAM,CAACA,EAAM,QACbjC,WAAY,CAAEF,KAAM,IAAKzD,UAEzBE,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,CAAC5C,YAAY,OAAOkD,OAAO,SAAI9E,KAAK,SAAS7B,MAAO,CAAEsG,aAAc,GAAKC,SAAUtH,OAE7F9B,EAAAA,EAAAA,KAACyJ,EAAAA,EAAW,CAACvJ,KAAM,GAAIC,MAAM,OAAO0C,MAAO,CAAEsG,aAAc,QAAU/I,QAASA,KAC1EkI,EAAO5C,GACP5D,GAAiB,MAzEhB4G,EA2ED,KAEZnJ,EAAAA,EAAAA,MAACqC,EAAAA,EAAK6D,KAAI,CACNhC,WAAY,CAAEF,KAAM,IAAKzD,SAAA,EAEzBE,EAAAA,EAAAA,KAAC0J,EAAAA,GAAM,CAAChF,KAAK,SAAStE,QAASA,IAAMiI,IAAOsB,OAAK,EAACC,MAAM5J,EAAAA,EAAAA,KAAC6J,EAAAA,EAAU,CAAC3J,KAAM,GAAIC,MAAM,SAAUL,SAAC,cAG/FE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAKkI,UAAS,CAACvB,OAAQA,SAE7B,KAGXvI,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK8F,KAAI,CACNhC,KAAK,aAAY5F,SAEhBA,CAACoI,EAAM6B,EAAAC,KAAA,IAAE,IAAE3B,EAAG,OAAEC,GAAQyB,GAAE,OAAExB,GAAQyB,EAAA,OACjCzK,EAAAA,EAAAA,MAAAiJ,EAAAA,SAAA,CAAA1I,SAAA,CACKoI,EAAO1D,KAAIyF,IAAA,IAAC,IAAEvB,EAAG,KAAEhD,KAASiD,GAAWsB,EAAA,OACpC1K,EAAAA,EAAAA,MAACqJ,EAAAA,EAAK,CAEF/F,MAAO,CACHgG,QAAS,QAEbC,MAAM,WAAUhJ,SAAA,EAEhBE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK6D,KAAI,IACFkD,EACJjD,KAAM,CAACA,EAAM,QACbjC,WAAY,CAAEF,KAAM,IACpBqC,MAAO,CACH,CACIC,UAAU,EACVR,QAAS,iBAEfvF,UAEFE,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACHE,YAAY,OACZzD,MAAO,CAAEoG,MAAO,QAChB1B,uBAAuB,EAAMzH,SAE5BoK,EAAAA,GAAe1F,KAAIE,IAChB1E,EAAAA,EAAAA,KAACoG,EAAAA,EAAOmD,OAAM,CAAYxD,MAAOrB,EAAK5E,SAAE4E,GAApBA,UAIhC1E,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK6D,KAAI,IACFkD,EACJjD,KAAM,CAACA,EAAM,YACbjC,WAAY,CAAEF,KAAM,IACpBqC,MAAO,CACH,CACIC,UAAU,EACVR,QAAS,qBAEfvF,UAEFE,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,CAAC5C,YAAY,MAAM5B,KAAK,SAAS7B,MAAO,CAAEsG,aAAc,QAElEnJ,EAAAA,EAAAA,KAACyJ,EAAAA,EAAW,CAACvJ,KAAM,GAAIC,MAAM,OAAO0C,MAAO,CAAEsG,aAAc,QAAU/I,QAASA,IAAMkI,EAAO5C,OAxCtFgD,EAyCD,KAEZnJ,EAAAA,EAAAA,MAACqC,EAAAA,EAAK6D,KAAI,CACNhC,WAAY,CAAEF,KAAM,IAAKzD,SAAA,EAEzBE,EAAAA,EAAAA,KAAC0J,EAAAA,GAAM,CAAChF,KAAK,SAAStE,QAASA,IAAMiI,IAAOsB,OAAK,EAACC,MAAM5J,EAAAA,EAAAA,KAAC6J,EAAAA,EAAU,CAAC3J,KAAM,GAAIC,MAAM,SAAUL,SAAC,oBAG/FE,EAAAA,EAAAA,KAAC4B,EAAAA,EAAKkI,UAAS,CAACvB,OAAQA,SAE7B,KAGXvI,EAAAA,EAAAA,KAAA,OACI6C,MAAO,CACH8C,UAAW,SACb7F,UAEFE,EAAAA,EAAAA,KAAC0J,EAAAA,GAAM,CAAChF,KAAK,UAAUyF,SAAS,SAAQrK,SAAC,kBAM7C,E,cEnUT,MAAMsK,GAAmBC,EAAAA,EAAAA,IAAOX,EAAAA,GAAO;gBAC7BvK,GACbA,EAAMmL,SAAWnL,EAAMoL,WAAa,GAAKpL,EAAMqL,KAAO;WAC9CrL,GAAWA,EAAMmL,SAAWnL,EAAMsL,SAAW,GAAKtL,EAAMM,GAAK;aAC3DN,GAAUA,EAAMuL,GAAK;YACtBvL,GAAUA,EAAMO,GAAK;eAClBP,GAAUA,EAAMmB,IAAM;iBACpBnB,GAAUA,EAAMqB,IAAM;iBACtBrB,GAAUA,EAAMsB;YACrBtB,GAAUA,EAAMQ,GAAK;kBACfR,GAAUA,EAAMwL,IAAM;aAC3BxL,GAAUA,EAAMS,GAAK;YACtBT,GACTA,EAAMyL,GAAK;mBACKzL,GAAUA,EAAM0L,IAAM;WAC9B1L,GACRA,EAAMmL,SACFnL,EAAM2L,SAAW,yBACjB3L,EAAMuB,GAAK;mBACCvB,GAAUA,EAAMwB,IAAM;gBACzBxB,GAAUA,EAAM4L,IAAM;IAClC5L,GAAUA,EAAM6L,QAAU,WAAW7L,EAAM6L;;kBAE7B7L,GAAUA,EAAM8L,UAAY;cAChC9L,GAAUA,EAAMyL,GAAK;;;;;;;;EASvBM,GAAeb,EAAAA,EAAAA,IAAOX,EAAAA,GAAO;gBACzBvK,GAAUA,EAAMqL,KAAO;WAC5BrL,GAAUA,EAAMM,GAAK;aACnBN,GAAUA,EAAMuL,GAAK;YACtBvL,GAAUA,EAAMO,GAAK;eAClBP,GAAUA,EAAMmB,IAAM;iBACpBnB,GAAUA,EAAMqB,IAAM;iBACtBrB,GAAUA,EAAMsB;YACrBtB,GAAUA,EAAMQ,GAAK;kBACfR,GAAUA,EAAMwL,IAAM;aAC3BxL,GAAUA,EAAMS,GAAK;YACtBT,GAAUA,EAAMyL,GAAK;mBACdzL,GAAUA,EAAM0L,IAAM;WAC9B1L,GAAUA,EAAMuB,GAAK;mBACbvB,GAAUA,EAAMwB,IAAM;gBACzBxB,GAAUA,EAAM4L,IAAM;IAClC5L,GAAUA,EAAM6L,QAAU,WAAW7L,EAAM6L;;;kBAG7B7L,GACbA,EAAMgM,SAAWhM,EAAMgM,SAAWhM,EAAMqL,KAAO;cACtCrL,GAAUA,EAAMyL,GAAK;aACtBzL,GAAUA,EAAMuB,GAAK;;;kBAGhBvB,GAAUA,EAAM8L,UAAY;cAChC9L,GAAUA,EAAMyL,GAAK;aACtBzL,GAAUA,EAAMuB,GAAK;;;;;;;;8CC7DnC,MACA,EADwB0K,EAAAA,cAAoB,MCG/BC,EAAwB/D,IAU9B,IAV+B,MAClClI,EAAK,SACLkM,EAAQ,SACRxL,EAAQ,UACRyL,EAAS,OACTC,EAAM,SACNrK,EAAQ,gBACRsK,EAAe,WACfC,KACGC,GACNrE,EACG,MAAOsE,EAASC,IAAcrK,EAAAA,EAAAA,WAAS,GACjCsK,GAAWC,EAAAA,EAAAA,QAAO,MAClBpK,GAAOqK,EAAAA,EAAAA,YAAWC,IACxBC,EAAAA,EAAAA,YAAU,KACQ,IAADC,EAATP,IACgB,QAAhBO,EAAAL,EAASM,eAAO,IAAAD,GAAhBA,EAAkBE,QACtB,GACD,CAACT,IACJ,MAAMU,EAAaA,KACfT,GAAYD,GACZjK,EAAK4K,eAAe,CAChB,CAAChB,GAAYC,EAAOD,IACtB,EAEAiB,EAAOvI,UACT,IACI,MAAMK,QAAe3C,EAAK8K,iBAE1B,OADAH,IACOf,GACH,IAAK,SACDjH,EAAOoI,YAAc,IACdpI,EAAOoI,YACVhH,KAAM+F,EAAgBkB,IAAIrI,EAAOG,SAErC,MACJ,IAAK,WACL,IAAK,OACD,MAAM,KAAErC,EAAI,SAAED,GAAamC,EAC3BA,EAAOM,WAAcxC,GAAQoJ,EAAOpJ,OAASD,GAAYqJ,EAAOrJ,WAAc,EAItFuJ,EAAW,IACJF,KACAlH,GAEX,CAAE,MAAOsI,GACLC,QAAQC,IAAI,eAAgBF,EAChC,GAGEG,EAAYA,KACd,OAAOxB,GACH,IAAK,SACD,OAAOvL,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACNC,YAAU,EACV2G,IAAKlB,EACLvF,iBAAiB,QACjBgB,uBAAuB,EACvBf,WAAYA,CAACC,EAASC,KAAO,IAAAC,EAAAC,EAAA,OACV,QAAfD,EAAQ,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASI,aAAK,IAAAF,EAAAA,EAAI,IAAIG,cAAcC,eAA6B,QAAfH,EAAQ,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASG,aAAK,IAAAD,EAAAA,EAAI,IAAIE,cAAc,EAE5FE,QAAS7F,EACTiI,SAAUoD,EACVS,OAAQT,IAGpB,IAAK,OACD,OAAOxM,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACNE,YAAY,QACZzD,MAAO,CAACoG,MAAO,QACfG,SAAUoD,EACVS,OAAQT,EAAK1M,SAEZwJ,EAAAA,GAAU9E,KAAIG,IACX3E,EAAAA,EAAAA,KAACoG,EAAAA,EAAOmD,OAAM,CAAYxD,MAAOpB,EAAK7E,SAAE6E,GAApBA,OAGpC,IAAK,OACL,IAAK,WACD,OAAO3E,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,CAAC8D,IAAKlB,EAAUoB,aAAcV,EAAMS,OAAQT,EAAM9H,KAAK,WACxE,QACI,OAAO1E,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,CAAC8D,IAAKlB,EAAUoB,aAAcV,EAAMS,OAAQT,IACjE,EAEJ,IAAIW,EAAYrN,EAsBhB,OArBIwL,IACA6B,EAAYvB,GACR5L,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK6D,KAAI,CACN5C,MAAO,CAAEkB,OAAQ,GACjB2B,KAAM6F,EACN3F,MAAO,CAAC,CAAEC,UAAU,EAAMR,QAAS,GAAGjG,mBAAwBU,SAE5DiN,OAGN/M,EAAAA,EAAAA,KAAA,OACIoN,UAAU,2BACVvK,MAAO,CACHwK,iBAAkB,IAEtBjN,QAASkM,EAAWxM,SAEnBA,MAINE,EAAAA,EAAAA,KAAA,SAAQ2L,EAAS7L,SAAGqN,GAAe,EAGjCG,EAA6BnF,IAUnC,IAVoC,MACvC/I,EAAK,SACLkM,EAAQ,SACRxL,EAAQ,UACRyL,EAAS,OACTC,EAAM,UACNpK,EAAS,gBACTqK,EAAe,WACfC,KACGC,GACNxD,EACG,MAAOyD,EAASC,IAAcrK,EAAAA,EAAAA,WAAS,GACjCsK,GAAWC,EAAAA,EAAAA,QAAO,MAClBpK,GAAOqK,EAAAA,EAAAA,YAAWC,IACxBC,EAAAA,EAAAA,YAAU,KACQ,IAADqB,EAAT3B,IACgB,QAAhB2B,EAAAzB,EAASM,eAAO,IAAAmB,GAAhBA,EAAkBlB,QACtB,GACD,CAACT,IACJ,MAAMU,EAAaA,KACfT,GAAYD,GACZjK,EAAK4K,eAAe,CAChB,CAAChB,GAAYC,EAAOD,IACtB,EAEAiB,EAAOvI,UACT,IACI,MAAMK,QAAe3C,EAAK8K,iBAC1BH,IACAZ,EAAW,IACJF,KACAlH,GAEX,CAAE,MAAOsI,GACLC,QAAQC,IAAI,eAAgBF,EAChC,GAGEG,EAAYA,KACd,OAAOxB,GACH,IAAK,OACD,OAAOvL,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACNC,YAAU,EACV2G,IAAKlB,EACLvF,iBAAiB,QACjBgB,uBAAuB,EACvBf,WAAYA,CAACC,EAASC,KAAO,IAAAc,EAAAC,EAAA,OACV,QAAfD,EAAQ,OAAPf,QAAO,IAAPA,OAAO,EAAPA,EAASI,aAAK,IAAAW,EAAAA,EAAI,IAAIV,cAAcC,eAA6B,QAAfU,EAAQ,OAAPf,QAAO,IAAPA,OAAO,EAAPA,EAASG,aAAK,IAAAY,EAAAA,EAAI,IAAIX,cAAc,EAE5FE,QAASkD,EAAAA,GAAe1F,KAAIE,IAAI,CAAMmC,MAAOnC,EAAMqB,MAAOrB,MAC1D0E,SAAUoD,EACVS,OAAQT,IAGpB,IAAK,WACD,OAAOxM,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,CAAC8D,IAAKlB,EAAUoB,aAAcV,EAAMS,OAAQT,EAAM9H,KAAK,WACxE,QACI,OAAO1E,EAAAA,EAAAA,KAACkJ,EAAAA,EAAK,CAAC8D,IAAKlB,EAAUoB,aAAcV,EAAMS,OAAQT,IACjE,EAEJ,IAAIW,EAAYrN,EAsBhB,OArBIwL,IACA6B,EAAYvB,GACR5L,EAAAA,EAAAA,KAAC4B,EAAAA,EAAK6D,KAAI,CACN5C,MAAO,CAAEkB,OAAQ,GACjB2B,KAAM6F,EACN3F,MAAO,CAAC,CAAEC,UAAU,EAAMR,QAAS,GAAGjG,mBAAwBU,SAE5DiN,OAGN/M,EAAAA,EAAAA,KAAA,OACIoN,UAAU,2BACVvK,MAAO,CACHwK,iBAAkB,IAEtBjN,QAASkM,EAAWxM,SAEnBA,MAINE,EAAAA,EAAAA,KAAA,SAAQ2L,EAAS7L,SAAGqN,GAAe,ECnMjCK,EAAuBlG,IAA0B,IAAzB,MAAEmG,KAAUtO,GAAOmI,EACpD,MAAO3F,GAAQC,EAAAA,EAAKC,UACpB,OACI7B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAI,CAACD,KAAMA,EAAM+L,WAAW,EAAM5N,UAC/BE,EAAAA,EAAAA,KAACiM,EAAgB0B,SAAQ,CAAC5H,MAAOpE,EAAK7B,UAClCE,EAAAA,EAAAA,KAAA,SAAQb,OAET,EAIFyO,EAA4BzF,IAA0B,IAAzB,MAAEsF,KAAUtO,GAAOgJ,EACzD,MAAOxG,GAAQC,EAAAA,EAAKC,UACpB,OACI7B,EAAAA,EAAAA,KAAC4B,EAAAA,EAAI,CAACD,KAAMA,EAAM+L,WAAW,EAAM5N,UAC/BE,EAAAA,EAAAA,KAACiM,EAAgB0B,SAAQ,CAAC5H,MAAOpE,EAAK7B,UAClCE,EAAAA,EAAAA,KAAA,SAAQb,OAET,ECuSf,EAjTwBA,IACpB,MAAM,KAAE6B,EAAI,QAAEC,EAAO,UAAEmD,EAAS,YAAElD,EAAW,SAAEC,EAAQ,UAAEC,EAAS,gBAAEqK,GAAoBtM,GACjFkF,EAAWwJ,IAAgBrM,EAAAA,EAAAA,UAAS,OACpC+C,EAASuJ,IAActM,EAAAA,EAAAA,UAAS,OAChCO,EAAWgM,IAAgBvM,EAAAA,EAAAA,UAAS,KACpCwM,EAAWC,IAAiBzM,EAAAA,EAAAA,UAAS,KACrCF,EAASC,IAAcC,EAAAA,EAAAA,WAAS,IAChC0M,EAAaC,IAAkB3M,EAAAA,EAAAA,UAAS,IACxCoC,EAAMwK,IAAW5M,EAAAA,EAAAA,UAAS,OAC1BmC,EAAU0K,IAAe7M,EAAAA,EAAAA,YAuC1B8M,EAAYA,KACd,MAAMC,EAAU,CACZ,GAAMxM,EAAU+F,OAChB,OAAU,EACV,UAAa,EACb,SAAY,GACZ,KAAQ,GACR,KAAQ,KACR,YAAe,CACX,KAAQ,aAGV0G,EAAmB,IAAIzM,EAAWwM,GACxCR,EAAaS,GAETC,KAAKC,KAAKF,EAAiB1G,OArDlB,IAqDuC,GAChDqG,EAAeM,KAAKC,KAAKF,EAAiB1G,OAtDjC,IAuDb,EAYE4D,EAAciD,IAChB,MAAMJ,EAAU,IAAIxM,GACd0L,EAAQc,EAAQK,WAAW1M,GAASyM,EAAIE,KAAO3M,EAAK2M,KACpD3M,EAAOqM,EAAQd,GACrBc,EAAQO,OAAOrB,EAAO,EAAG,IAClBvL,KACAyM,IAEPZ,EAAaQ,EAAQ,EAGnBQ,EAAqBA,KACvB,MAAMR,EAAU,CACZ,GAAMP,EAAUlG,OAChB,KAAQ,WACR,SAAY,GAEVkH,EAAoB,IAAIhB,EAAWO,GACzCN,EAAce,EAAkB,EAQ9BC,EAAuBN,IACzB,MAAMJ,EAAU,IAAIP,GACdP,EAAQc,EAAQK,WAAW1M,GAASyM,EAAIE,KAAO3M,EAAK2M,KACpD3M,EAAOqM,EAAQd,GACrBc,EAAQO,OAAOrB,EAAO,EAAG,IAClBvL,KACAyM,IAEPV,EAAcM,EAAQ,EAsBpBW,EAAuB,CACzB,CACI9P,MAAO,OACPmM,UAAW,OACXD,UAAU,EACV6D,OAAS3D,IAAM,CACXA,SACAF,UAAU,EACVC,UAAW,OACXnM,MAAO,OACPsM,WAAYuD,KAGpB,CACI7P,MAAO,MACPmM,UAAW,WACXD,UAAU,EACV6D,OAAS3D,IAAM,CACXA,SACAF,UAAU,EACVC,UAAW,WACXnM,MAAO,MACPsM,WAAYuD,KAGpB,CACIhG,MAAO,EACPmG,OAAQA,CAACxH,EAAG4D,EAAQ6D,IAChBtN,EAAU+F,QAAU,GAChB9H,EAAAA,EAAAA,KAACyJ,EAAAA,EAAW,CAACvJ,KAAM,GAAIC,MAAM,mBAAmBC,QAASA,IAhE1CyO,KAC3B,MAAMN,EAAUP,EAAUsB,QAAQpN,GAASA,EAAK2M,KAAOA,IACvDZ,EAAcM,EAAQ,EA8DqDgB,CAAsB/D,EAAOqD,MAC5F,OAIVW,EAAU,IArDS,CACrB,CACIpQ,MAAO,YACPmM,UAAW,SACX6D,OAASlK,IAASlF,EAAAA,EAAAA,KAAAwI,EAAAA,SAAA,CAAA1I,SAAG2L,EAAgBkB,IAAIzH,MAE7C,CACI9F,MAAO,MACPmM,UAAW,YAEf,CACInM,MAAO,OACPmM,UAAW,QAEf,CACInM,MAAO,OACPmM,UAAW,SAqCmB/G,KAAKiL,IAChC,IACAA,EACHnE,UAAU,EACV6D,OAAS3D,IAAM,CACXA,SACAF,UAAU,EACVC,UAAWkE,EAAIlE,UACfnM,MAAOqQ,EAAIrQ,MACX+B,WACAsK,kBACAC,mBAIZ,CACIzC,MAAO,EACPmG,OAAQA,CAACxH,EAAG4D,IACRzJ,EAAU+F,QAAU,GAChB9H,EAAAA,EAAAA,KAACyJ,EAAAA,EAAW,CAACvJ,KAAM,GAAIC,MAAM,mBAAmBC,QAASA,IAtH/CyO,KAClB,GAAI9M,EAAU+F,QAAU,EAEpB,YADAzC,EAAAA,GAAQqK,MAAM,uCAGlB,MAAMnB,EAAUxM,EAAUuN,QAAQpN,GAASA,EAAK2M,KAAOA,IACvDd,EAAaQ,EAAQ,EAgHkDoB,CAAanE,EAAOqD,MACnF,OAcZ,OAVA3C,EAAAA,EAAAA,YAAU,KACN,MAAM,KAAEtI,EAAI,MAAEgM,EAAK,SAAEjM,EAAQ,UAAEU,EAAS,QAAEE,EAAO,WAAEM,GAAeT,GAAa,CAAC,EAChF2J,EAAa6B,GAAS,IACtB3B,EAAcpJ,GAAc,IAC5BuJ,EAAQtN,IAAM8C,IACdyK,EAAY1K,GACZkK,EAAaxJ,GACbyJ,EAAWvJ,EAAQ,GACpB,CAACH,KAGApE,EAAAA,EAAAA,KAACuC,EAAAA,EAAK,CACFnD,MAAM,YACNoD,OAAQ,KACRlB,QAASA,EACTN,KAAMA,EACNyB,SAAUxB,EACVyB,OAAQ,CAAEC,QAAS,CAAEC,QAAS,SAC9BC,MAAO,CAAEiB,SAAU,cAAehB,IAAK,QACvCmG,MAAM,cAAanJ,UAEnBP,EAAAA,EAAAA,MAACsQ,EAAAA,GAAO,CAAC9P,IAAI,OAAMD,SAAA,EACfE,EAAAA,EAAAA,KAACkG,EAAAA,EAAU,CAACH,MAAOnC,EAAMf,MAAO,CAAEiN,UAAW,MAAOC,UAAW,QAAU5J,OAAO,aAAaiD,SAAUA,CAAC4G,EAAGC,IAAM7B,EAAQtN,IAAMmP,EAAG,kBAClIjQ,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACHC,YAAU,EACVN,MAAO1B,EACPiC,YAAY,mBACZC,iBAAiB,QACjBC,WAAYA,CAACC,EAASC,KAAO,IAAAC,EAAAC,EAAA,OACV,QAAfD,EAAQ,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASI,aAAK,IAAAF,EAAAA,EAAI,IAAIG,cAAcC,eAA6B,QAAfH,EAAQ,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASG,aAAK,IAAAD,EAAAA,EAAI,IAAIE,cAAc,EAE5FE,QAAS9F,EACT2B,MAAO,CAAEoG,MAAO,QAChBG,SAAUA,CAAC4G,EAAGC,IAAMpC,EAAaoC,MAErC1Q,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACG,EAAE,IAAGG,SAAA,EACVE,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAACV,EAAE,mBAAmBW,GAAG,OAAOG,GAAG,QAAOX,SAAC,kBACtDE,EAAAA,EAAAA,KAACiH,EAAAA,GAAAA,MAAW,CACRD,QAAS,CACL,CAAEH,MAAO,QAASd,MAAO,SACzB,CAAEc,MAAO,aAAcd,MAAO,eAElCA,MAAOpC,EACPuM,WAAW,SACX9G,SAAW4G,GAAM3B,EAAY2B,EAAEG,OAAOpK,YAGjC,cAAZpC,IACGpE,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACG,EAAE,IAAGG,SAAA,EACVE,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAACV,EAAE,mBAAmBW,GAAG,OAAOG,GAAG,QAAOX,SAAC,cACtDE,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACHC,YAAU,EACVN,MAAOxB,EACP+B,YAAY,eACZC,iBAAiB,QACjBgB,uBAAuB,EACvBf,WAAYA,CAACC,EAASC,KAAO,IAAAc,EAAAC,EAAA,OACV,QAAfD,EAAQ,OAAPf,QAAO,IAAPA,OAAO,EAAPA,EAASI,aAAK,IAAAW,EAAAA,EAAI,IAAIV,cAAcC,eAA6B,QAAfU,EAAQ,OAAPf,QAAO,IAAPA,OAAO,EAAPA,EAASG,aAAK,IAAAY,EAAAA,EAAI,IAAIX,cAAc,EAE5FE,QAAS5F,EACTgI,SAAUA,CAAC4G,EAAGC,IAAMnC,EAAWmC,SAG3CjQ,EAAAA,EAAAA,KAACoQ,EAAAA,EAAK,CACFC,UAAQ,EACRnQ,KAAK,SACLsP,QAASA,EACTc,WAAYvO,EACZwO,aAAcA,IAAM,eACpBC,WAAY,CACRC,SAAU,CAAC,OAAQ,gBACnBC,SA5PH,GA6PGtH,SAAWxJ,IAAM+Q,EAAAA,EAAAA,IAAkB/Q,EAAGuO,GACtC/B,QAAS8B,GAEb0C,WAAY,CACRC,KAAM,CACFlC,IAAKnB,EACLsD,KAAMzF,IAGd7I,OAAQA,KAAMxC,EAAAA,EAAAA,KAAC0J,EAAAA,GAAM,CAAChF,KAAK,SAAStE,QAASkO,EAAW3E,OAAK,EAACC,MAAM5J,EAAAA,EAAAA,KAAC6J,EAAAA,EAAU,CAAC3J,KAAM,GAAIC,MAAM,qBAAsBL,SAAC,aAIvH+C,MAAO,CAAEoG,MAAO,OAAQ8H,WAAY,MAExC/Q,EAAAA,EAAAA,KAACoQ,EAAAA,EAAK,CACFC,UAAQ,EACRnQ,KAAK,SACLsP,QAASN,EACToB,WAAYtC,EACZuC,aAAcA,IAAM,eACpBC,YAAY,EACZI,WAAY,CACRC,KAAM,CACFlC,IAAKf,EACLkD,KAAMxD,IAGd9K,OAAQA,KAAMxC,EAAAA,EAAAA,KAAC0J,EAAAA,GAAM,CAAChF,KAAK,SAAStE,QAAS2O,EAAoBpF,OAAK,EAACC,MAAM5J,EAAAA,EAAAA,KAAC6J,EAAAA,EAAU,CAAC3J,KAAM,GAAIC,MAAM,qBAAsBL,SAAC,kBAIhI+C,MAAO,CAAEoG,MAAO,OAAQ8H,WAAY,MAExC/Q,EAAAA,EAAAA,KAACoK,EAAgB,CAAC1J,EAAE,OAAOjB,EAAE,OAAOC,EAAE,OAAOgF,KAAK,UAAUtE,QA7RvD6D,UACb,IAAKG,EAED,YADAiB,EAAAA,GAAQqK,MAAM,wBAGlBnO,GAAW,GACX,MAAMyP,EAAgB,CAAC,EACV,OAAT3M,QAAS,IAATA,GAAAA,EAAW0B,OAAS1B,EAAU0B,OAAS3B,EAAUC,YACjD2M,EAAc3M,UAAYA,EAAU0B,OAEpCpC,GAAYS,EAAUT,WACtBqN,EAAcrN,SAAWA,GAEd,cAAZA,GAAmC,OAAPY,QAAO,IAAPA,GAAAA,EAASwB,OAASxB,EAAQwB,OAAS3B,EAAUG,QACxEyM,EAAczM,QAAUA,EAAQwB,MACd,SAAZpC,GAA4C,MAArBS,EAAUG,UACvCyM,EAAczM,QAAU,MAEvBzD,IAAMsD,EAAUR,MAAMqN,OAAOrN,EAAM,SACpCoN,EAAcpN,KAAOA,EAAK7C,WAE9B,SLQuBmQ,EAACrC,EAAI1K,KAChC,MAAMW,EAAM,GAAGC,EAAAA,kCAAuC8J,IAEtD,OAAO7J,EAAAA,EAAAA,IAAQ,CACXF,IAAKA,EACLG,OAAQ,OACRC,KAAMf,EACNgB,QAAS,CACL,eAAgB,qBAEtB,EKjBY+L,CAAgB9M,EAAUyK,GAAI,CAChCzK,UAAW4M,EACXjP,YACA8C,WAAYmJ,IAEhB3I,EAAAA,GAAQC,QAAQ,kCACpB,CAAE,MAAOC,IACLC,EAAAA,EAAAA,IAAYD,GACZtE,GACJ,CAAC,QACGM,GAAW,EACf,GA4PuFsB,MAAO,CAAEiN,UAAW,UAAWhQ,SAAC,aAI/G,E,wBCvThB,MAAMqR,EAAOC,EAAQ,M,wBCiBrB,MAAMC,EAAkB,CACtB,CAACtL,MAAO,UAAWc,OAAO7G,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAACiR,GAAG,OAAOhR,GAAG,OAAOE,GAAG,MAAME,EAAGE,EAAsB,QAAEd,SAAC,aAC/F,CAACiG,MAAO,SAAUc,OAAO7G,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAACiR,GAAG,OAAOhR,GAAG,OAAOE,GAAG,MAAME,EAAGE,EAAqB,OAAEd,SAAC,YAC7F,CAACiG,MAAO,OAAQc,OAAO7G,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAACiR,GAAG,OAAOhR,GAAG,OAAOE,GAAG,MAAME,EAAGE,EAAmB,KAAEd,SAAC,UACzF,CAACiG,MAAO,OAAQc,OAAO7G,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAACiR,GAAG,OAAOhR,GAAG,OAAOE,GAAG,MAAME,EAAGE,EAAmB,KAAEd,SAAC,UACzF,CAACiG,MAAO,YAAac,OAAO7G,EAAAA,EAAAA,KAACK,EAAAA,GAAU,CAACiR,GAAG,OAAOhR,GAAG,OAAOE,GAAG,MAAME,EAAGE,EAAwB,UAAEd,SAAC,gBAyVrG,EAtVkByR,KAChB,MAAMC,GAAWC,EAAAA,EAAAA,OACVT,EAAeU,IAAoBlQ,EAAAA,EAAAA,UAAS,KAC5CmQ,EAAoBC,IAAyBpQ,EAAAA,EAAAA,UAAS,KACtDqQ,EAAkBC,IAAuBtQ,EAAAA,EAAAA,WAAS,IAClDuQ,EAAmBC,IAAwBxQ,EAAAA,EAAAA,WAAS,IACpDyQ,EAAmBC,IAAwB1Q,EAAAA,EAAAA,UAAS,OACpDN,EAAaiR,IAAkB3Q,EAAAA,EAAAA,UAAS,KACxCiK,EAAiB2G,IAAsB5Q,EAAAA,EAAAA,UAAS,IAAI6Q,MACpDlR,EAAUmR,IAAe9Q,EAAAA,EAAAA,UAAS,KAClCJ,EAAWmR,IAAgB/Q,EAAAA,EAAAA,UAAS,KACpCoC,EAAMwK,IAAW5M,EAAAA,EAAAA,UAAS,CAACV,MAASA,SACpC0R,EAAwBC,IAA6BjR,EAAAA,EAAAA,WAAS,IAG9DkR,EAAiBC,IAAsBnR,EAAAA,EAAAA,UAAS,OAChDoR,EAAgBC,IAAqBrR,EAAAA,EAAAA,UAAS,MAE/CsR,EAAqB7O,MAAO4K,EAAIkE,EAAQC,KAC5C,IAEE,MAAMC,EAActB,EAAmBnN,KAAKtC,GAC1CA,EAAK2M,KAAOA,EAAK,IAAK3M,EAAM6Q,OAAQC,GAAc9Q,IAEpD0P,EAAsBqB,QPeUC,EAACrE,EAAI1K,KACvC,MAAMW,EAAM,GAAGC,EAAAA,yCAA8C8J,IAE7D,OAAO7J,EAAAA,EAAAA,IAAQ,CACXF,IAAKA,EACLG,OAAQ,OACRC,KAAMf,EACNgB,QAAS,CACL,eAAgB,qBAEtB,EOtBuB+N,CAAuBrE,EAAI,CAAEkE,OAAQC,GAC9D,CAAE,MAAOtD,IACPlK,EAAAA,EAAAA,IAAYkK,GAGZ,MAAMyD,EAAexB,EAAmBnN,KAAKtC,GAC3CA,EAAK2M,KAAOA,EAAK,IAAK3M,EAAM6Q,OAAQA,GAAW7Q,IAEjD0P,EAAsBuB,EACxB,GAGI3D,EAAU,CACd,CACEpQ,MAAO,OACPmM,UAAW,cACX6H,cAAeV,GAAmB,CAACA,GACnCW,SAAUA,CAACtN,EAAOyF,IAAWA,EAAOnH,WAAa0B,KAIjDuN,EAAAA,EAAAA,IAAY,mBACd9D,EAAQ+D,KAAK,CACXnU,MAAO,SACPmM,UAAW,SACX6H,cAAeR,GAAkB,CAACA,GAClCS,SAAUA,CAACtN,EAAOyF,IAAWA,EAAOuH,QAAUhN,EAC9CqJ,OAAQA,CAAClK,EAAMsG,KAAWxL,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CAC7BL,MAAOb,EACP8B,QAASqK,EACTxO,MAAO,CAAEoG,MAAO,eAChB1B,uBAAuB,EACvBnH,QAAU4P,GAAMA,EAAEwD,kBAClBpK,SAAW4J,GAAcF,EAAmBtH,EAAOqD,GAAI3J,EAAM8N,MAEjE,CACAtK,IAAK,SACL0G,OAAQA,CAACxH,EAAG6L,KAAYzT,EAAAA,EAAAA,KAAC0T,EAAAA,EAAY,CAACxT,KAAM,GAAIC,MAAM,sBAAsBwT,OAAO,OAAOvT,QAAU4P,IAClGA,EAAEwD,kBACFtB,EAAqBuB,GACrBzB,GAAqB,EAAK,IAE5B/I,MAAO,IAGTuG,EAAQ+D,KAAK,CACXnU,MAAO,SACPmM,UAAU,SACV6D,OAASlK,IAASlF,EAAAA,EAAAA,KAAC4T,EAAAA,EAAG,CAACzT,MAAOS,EAAasE,GAAMpF,SAC9CoF,EAAK4B,kBAKZ,MAAM+M,GAAmB,CACvB,CACEzU,MAAO,YACPmM,UAAW,SACX6D,OAASlK,IAASlF,EAAAA,EAAAA,KAAAwI,EAAAA,SAAA,CAAA1I,SAAGqB,EAAS2S,MAAM9D,GAAMA,EAAEjK,OAASb,IAAM2B,SAE7D,CACEzH,MAAO,MACPmM,UAAW,YAEb,CACEnM,MAAO,OACPmM,UAAW,QAEb,CACEnM,MAAO,OACPmM,UAAW,SAITwI,GAAiBA,KACC,OAAlBpC,QAAkB,IAAlBA,GAAAA,EAAoB7J,OD5HCkM,EAACC,EAAWC,EAAWC,KAEhD,MAAMC,EAAcC,GAAevT,IAAMuT,GAAYlO,OAAO,cAGtDmO,EAAcL,EAAUM,QAAO,CAACC,EAAKC,KACvC,MAAM7Q,EAAOwQ,EAAWK,EAAM7Q,MAG9B,OAFK4Q,EAAI5Q,KAAO4Q,EAAI5Q,GAAQ,IAC5B4Q,EAAI5Q,GAAM2P,KAAKkB,GACRD,CAAG,GACX,CAAC,GAGEE,EAAWvD,EAAKwD,MAAMC,WAE5BC,OAAOC,KAAKR,GAAaS,SAAQnR,IAE7B,MAAMoR,EAAWV,EAAY1Q,GAAMqR,SAAQR,GACvCA,EAAM7E,MAAMpL,KAAI,CAACtC,EAAMuL,KAAK,CACxB,eAA0B,IAAVA,EAAcgH,EAAMS,YAAc,GAClD,qBAAgC,IAAVzH,EAAcgH,EAAMU,iBAAmB,GAC7D,YAAuB,IAAV1H,EAAcgH,EAAM9Q,SAAW,GAC5C,OAAoB,IAAV8J,EAAcgH,EAAM1B,OAAS,GACvC,iBAA4B,IAAVtF,EAAcgH,EAAMW,cAAgB,GACtD,KAAkB,IAAV3H,EAAc2G,EAAWK,EAAM7Q,MAAQ,GAC/C,OAAoB,IAAV6J,EAAcgH,EAAMY,OAAS,GACvC,YAAanT,EAAKwK,YAAYhH,KAC9B,KAAQxD,EAAKE,KACb,SAAYF,EAAKC,SACjB,KAAQD,EAAKyC,KACb,aAAczC,EAAK0C,gBAKrB0Q,EAAYnE,EAAKwD,MAAMY,cAAcP,GAC3C7D,EAAKwD,MAAMa,kBAAkBd,EAAUY,EAAW1R,EAAK,IAI3DuN,EAAKsE,UAAUf,EAAU,GAAGR,KAAaC,gBAEzCtH,QAAQC,IAAI,4CAA4C,ECsFxDkH,CAAcrC,EAAoB/N,EAAK,GAAGuC,OAAO,cAAevC,EAAK,GAAGuC,OAAO,eAH7Ed,EAAAA,GAAQqK,MAAM,wBAG6E,EAGzFgG,GAAgBA,KAElBnW,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACG,EAAE,IAAII,IAAI,OAAMD,SAAA,EACvBE,EAAAA,EAAAA,KAACkL,EAAY,CACXxL,EAAE,OACFU,QAASA,IAAM0R,GAAoB,GACnClI,MAAM5J,EAAAA,EAAAA,KAAC2V,EAAAA,EAAI,CAACzV,KAAM,GAAIC,MAAM,SAAUL,SACrC,SAGHE,EAAAA,EAAAA,KAAC4V,EAAAA,EAAc,CAAC1V,KAAM,GAAIC,MAAM,OAAO0C,MAAO,CAAEiN,UAAW,MAAO/L,OAAQ,QAAU3D,QAAS2T,QAK7F8B,GAAiB5R,UACrB,IACE,MAAM6R,OPzIoBC,MAC5B,MAAMjR,EAAM,GAAGC,EAAAA,sBAEf,OAAOC,EAAAA,EAAAA,IAAQ,CACXF,IAAKA,EACLG,OAAQ,MACRE,QAAS,CACL,eAAgB,qBAEtB,EOgIkB4Q,GAClB,GAAkB,KAAdD,EAAI/C,OAAe,CAAC,IAADiD,EACrB,MAAMC,EAA2B,QAAXD,EAAGF,EAAI5Q,YAAI,IAAA8Q,OAAA,EAARA,EAAUxR,KAAK0R,IAC/B,CACLnQ,MAAOmQ,EAAQrH,GACfhI,MAAOqP,EAAQC,aAAe,QAGlChE,EAAe8D,EACjB,CACF,CAAE,MAAO1Q,IACPC,EAAAA,EAAAA,IAAYD,EACd,GAGI6Q,GAAcnS,UAClB,IACE,MAAM6R,OP9IiBO,MACzB,MAAMvR,EAAM,GAAGC,EAAAA,mBAEf,OAAOC,EAAAA,EAAAA,IAAQ,CACXF,IAAKA,EACLG,OAAQ,MACRE,QAAS,CACL,eAAgB,qBAEtB,EOqIkBkR,GAClB,GAAkB,KAAdP,EAAI/C,OAAe,CAAC,IAADuD,EACrB,MAAMC,EAAW,IAAIlE,IACfmE,EAAyB,QAAXF,EAAGR,EAAI5Q,YAAI,IAAAoR,OAAA,EAARA,EAAU9R,KAAKtC,IAC/BqU,EAASE,IAAIvU,EAAK2M,KAAK0H,EAASG,IAAIxU,EAAK2M,GAAI3M,EAAKwD,MAChD,CACLK,MAAO7D,EAAK2M,GACZhI,MAAO3E,EAAKwD,SAGhB4M,EAAYkE,GACZpE,EAAmBmE,EACrB,CACF,CAAE,MAAOhR,IACPC,EAAAA,EAAAA,IAAYD,EACd,GAoBIlE,GAAc4C,UAClB,IACE,MAAM6R,OP5MoB3R,KAC5B,MAAMW,EAAM,GAAGC,EAAAA,wBAEf,OAAOC,EAAAA,EAAAA,IAAQ,CACXF,IAAKA,EACLG,OAAQ,OACRC,KAAMf,EACNgB,QAAS,CACL,eAAgB,qBAEtB,EOkMkBwR,CAAgB,CAChCzC,UAAWtQ,EAAK,GAAGgT,QAAQ,OAAO7V,UAClCoT,QAASvQ,EAAK,GAAGiT,MAAM,OAAO9V,YAEd,KAAd+U,EAAI/C,SACNrB,EAAiBoE,EAAI5Q,MACrB0M,EAAsBkE,EAAI5Q,MAE9B,CAAE,MAAOK,IACPC,EAAAA,EAAAA,IAAYD,EACd,GAOIuR,GAAcC,IAClB,MAAMC,EAAcpT,EAAK,GAAGyE,IAAI0O,EAAM,OACtC3I,EAAQ,CAAC4I,EAAaA,GAAa,EAG/BC,GAAa9X,IAEfa,EAAAA,EAAAA,KAACoQ,EAAAA,EAAK,CACJC,UAAQ,EACRxN,MAAO,CAAEoG,MAAO,OAAQ8H,WAAY,GACpC7Q,KAAK,SACLsQ,WAAY,CACVC,SAAU,CAAC,OAAQ,gBACnBC,SAAU,GAEZlB,QAASqE,GACTvD,WAAYnR,EAAM+X,UAAY,KAwBpC,OAdAhL,EAAAA,EAAAA,YAAU,KAERuG,EAA0B7O,EAAK,GAAGqN,OAAOrN,EAAK,GAAI,QAGlDvC,IAAa,GACZ,CAACuC,KAEJsI,EAAAA,EAAAA,YAAU,KACR2J,KACAO,KAxEmBnS,WACnB,IACE,MAAM6R,QAAYqB,EAAAA,EAAAA,KAClB,GAAkB,KAAdrB,EAAI/C,OAAe,CAAC,IAADqE,EACrB,MAAMC,EAA0B,QAAXD,EAAGtB,EAAI5Q,YAAI,IAAAkS,OAAA,EAARA,EAAU5S,KAAK8S,IAC9B,CACLvR,MAAOuR,EAAMzI,GACbhI,MAAOyQ,EAAMnB,gBAGjB5D,EAAa8E,EACf,CACF,CAAE,MAAO9R,IACPC,EAAAA,EAAAA,IAAYD,EACd,GA2DAgS,EAAc,GACb,KAGDhY,EAAAA,EAAAA,MAACsQ,EAAAA,GAAO,CAAC2H,GAAG,SAASC,KAAkC,QAASC,KAAK,QAAQjY,EAAE,OAAO+K,IAAI,OAAO3H,MAAO,CAAE4N,SAAU,YAAa3Q,SAAA,EAC/HE,EAAAA,EAAAA,KAAC2X,EAAY,CAACvY,MAAM,QAAQC,OAAQA,IAAImS,GAAU,GAAIlS,cAAcgU,EAAAA,EAAAA,IAAY,oBAAqBtT,EAAAA,EAAAA,KAAC0V,GAAa,IAAM,QACzHnW,EAAAA,EAAAA,MAACsQ,EAAAA,GAAO,CAAClQ,EAAE,IAAIF,EAAE,OAAOG,EAAE,OAAOG,IAAI,OAAMD,SAAA,EAEvCwT,EAAAA,EAAAA,IAAY,qBACZ/T,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACC,EAAE,OAAOE,EAAE,IAAII,IAAI,OAAMD,SAAA,EAChCE,EAAAA,EAAAA,KAAC4X,EAAAA,EAAe,CAAC1X,KAAM,GAAIC,MAAM,UAAU0I,QAAS2J,EAAyB,QAAU,OAAQpS,QAASA,IAAI0W,IAAY,MACxH9W,EAAAA,EAAAA,KAACkG,EAAAA,EAAW2R,YAAW,CAAC9R,MAAOnC,EAAMf,MAAO,CAAEiN,UAAW,MAAO7G,MAAO,QAAUG,SApDtE0O,CAAClQ,EAAGmQ,KACvB,MAAMC,EAAWD,EAAMvT,KAAIZ,GAAQ9C,IAAM8C,EAAM,gBAC/CwK,EAAQ4J,EAAS,EAkDgG7R,OAAO,aAAa8R,eAAe,WAC5IjY,EAAAA,EAAAA,KAACkY,EAAAA,EAAgB,CAAChY,KAAM,GAAIC,MAAM,UAAU0I,QAAS2J,EAAyB,QAAU,OAAQpS,QAASA,IAAI0W,GAAW,SAG5HvX,EAAAA,EAAAA,MAACC,EAAAA,GAAO,CAACC,EAAE,OAAOE,EAAE,IAAII,IAAI,OAAMD,SAAA,EAChCE,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACHC,YAAU,EACVN,MAAO2M,EACPpM,YAAY,YACZC,iBAAiB,QACjBgB,uBAAuB,EACvBf,WAAYA,CAACC,EAASC,KAAO,IAAAC,EAAAC,EAAA,OACV,QAAfD,EAAQ,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASI,aAAK,IAAAF,EAAAA,EAAI,IAAIG,cAAcC,eAA6B,QAAfH,EAAQ,OAAPF,QAAO,IAAPA,OAAO,EAAPA,EAASG,aAAK,IAAAD,EAAAA,EAAI,IAAIE,cAAc,EAE5FE,QAAS9F,EACT2B,MAAO,CAAEsV,SAAU,MAAOlP,MAAO,QACjCG,SAAW4G,GAAM2C,EAAmB3C,MAExChQ,EAAAA,EAAAA,KAACoG,EAAAA,EAAM,CACHL,MAAO6M,EACP5L,QAASqK,EACT/K,YAAY,SACZzD,MAAO,CAAEoG,MAAO,eAChB1B,uBAAuB,EACvB6B,SAAW4J,GAAcH,EAAkBG,MAE/ChT,EAAAA,EAAAA,KAACkL,EAAY,CAACxL,EAAE,OAAOY,GAAG,OAAOF,QArDrBgY,KAClBzF,EAAmB,MACnBE,EAAkB,KAAK,EAmDqC/S,SAAC,cAEzDE,EAAAA,EAAAA,KAACoQ,EAAAA,EAAK,CACJvN,MAAO,CAAEoG,MAAO,QAChB/I,KAAK,SACLsQ,WAAY,CACVC,SAAU,CAAC,OAAQ,gBACnBC,SAAU,IAEZlB,QAASA,EACTc,WAAYqB,GAAsB,GAClC0G,WAAY,CACVC,WAAYA,IAAM,KAClBC,uBAAwB,EACxBC,kBAAkB,EAClBC,kBAAoBjN,IAAM,IAAAkN,EAAA,OAAKnZ,EAAAA,EAAAA,MAACwD,EAAAA,GAAS,CAAC8L,GAAG,OAAOpP,EAAE,OAAMK,SAAA,EAC1DE,EAAAA,EAAAA,KAACiX,GAAS,CAACC,SAAU1L,EAAOoE,SAC5B5P,EAAAA,EAAAA,KAAC2Y,EAAAA,EAAY,CACXvZ,MAAM,GACNc,KAAK,QACL2C,MAAO,CAACsG,aAAc,QACtBtF,OAAO,WACPwM,UAAQ,EACRuI,OAAQ,CAAEtV,GAAI,GACdsM,MAAO,CACL,CACElH,IAAK,IACL7B,MAAO,QACP/G,SAAU0L,EAAOqN,WACjB,CACAnQ,IAAK,IACL7B,MAAO,aACP/G,SAA2B,QAAnB4Y,EAAElN,EAAO3G,kBAAU,IAAA6T,OAAA,EAAjBA,EAAmBlU,KAAKwL,IAAIzQ,EAAAA,EAAAA,MAAAiJ,EAAAA,SAAA,CAAA1I,SAAA,CAAGkQ,EAAEtL,KAAK,MAAIsL,EAAE7N,UAASnC,EAAAA,EAAAA,KAAA,eAEjE,CACE0I,IAAK,IACL7B,MAAO,QACP/G,SAAU,WAAKsD,EAAAA,EAAAA,IAAUoI,EAAOoE,MAAM2E,QAAO,CAACuE,EAAMtE,IAC3CsE,GAAQtE,EAAI5P,WAAa,IAC/B,YAIC,GAEdmU,OAAQA,CAACnR,EAAGyH,IAAMA,QAGtBrP,EAAAA,EAAAA,KAACgZ,EAAa,CACZhY,KAAM6Q,EACN5Q,QAASA,IAAM6Q,GAAoB,GACnC5Q,YAAaA,EACb2U,eAAgBA,GAChB1U,SAAUA,EACViV,YAAaA,GACbhV,UAAWA,EACXC,YAAaA,MAEfrB,EAAAA,EAAAA,KAACiZ,EAAc,CACbjY,KAAM+Q,EACN9Q,QAASA,IAAM+Q,GAAqB,GACpC5N,UAAW6N,EACX/Q,YAAaA,EACbC,SAAUA,EACVC,UAAWA,EACXqK,gBAAiBA,MAEX,C","sources":["Components/CommonHeader/index.jsx","Components/TableColumns/index.jsx","Components/AddSalesOrderModal/index.jsx","api/sales/index.js","Styled/Button/index.jsx","Components/EditSalesOrderModal/CommonContext.jsx","Components/EditSalesOrderModal/EditableCell.jsx","Components/EditSalesOrderModal/EditableRow.jsx","Components/EditSalesOrderModal/index.jsx","Utils/excel.jsx","Pages/SaleOrder/index.jsx"],"sourcesContent":["import { CaretLeft } from \"@phosphor-icons/react\";\nimport { RowFlex, StyledText } from \"../../Styled/Layout\";\n\nconst CommonHeader = (props) => {\n  const {title, onBack, rightContent} = props;\n  return (\n    <RowFlex\n          w=\"100%\"\n          h=\"56px\"\n          m=\"0\"\n          p=\"10px 20px\"\n          bg=\"#6a8099\"\n    >\n      <RowFlex m=\"auto 0\" gap=\"10px\">\n        <CaretLeft size={24} color=\"#fff\" onClick={onBack} />\n        <StyledText fs=\"18px\" lh=\"24px\" fw=\"600\" ff=\"Inter\" c=\"#fff\" mb=\"auto\">\n            {title}\n        </StyledText>\n      </RowFlex>\n      {rightContent}\n    </RowFlex>\n  );\n};\n\nexport default CommonHeader;\n","export const statusDesign = {\n  \"PENDING\": \"orange\",\n  \"PACKED\": \"purple\",\n  \"SENT\": \"blue\",\n  \"DONE\": \"green\",\n  \"CANCELLED\": \"red\",\n}\n","import { useState } from \"react\";\nimport { Button, DatePicker, Form, Input, message, Modal, Radio, Select, Space } from \"antd\";\nimport { MinusCircle, PlusCircle } from \"@phosphor-icons/react\";\nimport dayjs from 'dayjs';\nimport { addSaleOrder } from \"../../api/sales\";\nimport { addCommas, ContainerTypes, handleCatch, ItemUnits } from \"../../common-utils\";\nimport { StyledDiv } from \"../../Styled/Layout\";\nconst dateTimestamp = dayjs().valueOf();\n\nconst AddSalesOrder = (props) => {\n    const { open, onClose, allContacts, allItems, allAgents, fetchOrders } = props;\n    const [loading, setLoading] = useState(false);\n    const [totalAmount, setTotalAmount] = useState(0);\n    const [form] = Form.useForm();\n\n    const onFinish = async (values) => {\n        setLoading(true);\n        const payload = {\n            saleOrder: {\n                contactId: values.contactId,\n                agentId: values.agentId,\n                saleType: values.saleType,\n            },\n            lineItems: values.lineItems?.map((item) => {\n                return {\n                    itemId: item.itemId,\n                    type: 'SALE_ORDER',\n                    quantity: item.quantity,\n                    unit: item.unit,\n                    rate: item.rate,\n                    itemTotal: item.quantity * item.rate,\n                }\n            }),\n            containers: values.containers\n        }\n        try {\n            await addSaleOrder(payload);\n            message.success('sale order added successfully');\n            fetchOrders();\n            closePopup();\n        } catch (err) {\n            handleCatch(err);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleItemTotal = () => {\n        const lineItems = form.getFieldValue('lineItems');\n        let total = 0;\n        for (const item of lineItems) {\n            const { quantity, rate } = item;\n            total += rate && quantity ? rate * quantity : 0;\n        }\n        setTotalAmount(total);\n    }\n\n    const closePopup = () => {\n        form.resetFields();\n        onClose();\n    }\n\n    return (\n        <Modal\n            title=\"Add Sales\"\n            footer={null}\n            loading={loading}\n            open={open}\n            onCancel={closePopup}\n            styles={{ content: { padding: '10px' } }}\n            style={{top: '50px'}}\n        >\n            <StyledDiv pos=\"absolute\" top=\"10px\" right=\"50px\" c=\"#00000088\" style={{fontWeight: '600', fontSize: '16px'}}>Total : ₹ {addCommas(totalAmount)}</StyledDiv>\n            <Form\n                form={form}\n                labelCol={{ xs: { span: 10 }, sm: { span: 8 } }}\n                wrapperCol={{ xs: { span: 14 }, sm: { span: 16 } }}\n                initialValues={{\n                    saleType: 'local',\n                    date: dateTimestamp\n                }}\n                layout=\"horizontal\"\n                size=\"middle\"\n                style={{\n                    maxWidth: 600,\n                    margin: '20px 0 10px'\n                }}\n                onFinish={onFinish}\n            >\n                <Form.Item\n                    name=\"date\"\n                    wrapperCol={{ span: 24 }}\n                    style={{ textAlign: 'right' }}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    getValueProps={(value) => ({\n                        value: value && dayjs(Number(value)),\n                    })}\n                    normalize={(value) => value && `${dayjs(value).valueOf()}`}\n                >\n                    <DatePicker format=\"DD/MM/YYYY\" />\n                </Form.Item>\n                <Form.Item name=\"contactId\" wrapperCol={{ span: 24 }} rules={[{ required: true, message: 'Please select a customer!' }]}>\n                    <Select\n                        showSearch\n                        placeholder=\"Select Customer\"\n                        optionFilterProp=\"label\"\n                        filterSort={(optionA, optionB) =>\n                            (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                        }\n                        options={allContacts}\n                    />\n                </Form.Item>\n                <Form.Item\n                    name=\"saleType\"\n                    label=\"sale type\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please pick an item!',\n                        },\n                    ]}>\n                    <Radio.Group>\n                        <Radio.Button value=\"local\">Local</Radio.Button>\n                        <Radio.Button value=\"interState\">InterState</Radio.Button>\n                    </Radio.Group>\n                </Form.Item>\n                <Form.Item\n                    noStyle\n                    shouldUpdate={(prevValues, currentValues) => prevValues.saleType !== currentValues.saleType}\n                >\n                    {({ getFieldValue }) =>\n                        getFieldValue('saleType') === 'interState' ? (\n                            <Form.Item name=\"agentId\" label=\"Agent\">\n                                <Select\n                                    showSearch\n                                    placeholder=\"Select Agent\"\n                                    optionFilterProp=\"label\"\n                                    popupMatchSelectWidth={false}\n                                    filterSort={(optionA, optionB) =>\n                                        (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                                    }\n                                    options={allAgents}\n                                />\n                            </Form.Item>\n                        ) : null}\n                </Form.Item>\n                <Form.List\n                    name=\"lineItems\"\n                    rules={[\n                        {\n                            validator: async (_, names) => {\n                                if (!names || names.length < 1) {\n                                    return Promise.reject(new Error('At least 1 Item'));\n                                }\n                            },\n                        },\n                    ]}\n                >\n                    {(fields, { add, remove }, { errors }) => (\n                        <>\n                            {fields.map(({ key, name, ...restField }) => (\n                                <Space\n                                    key={key}\n                                    style={{\n                                        display: 'flex'\n                                    }}\n                                    align=\"baseline\"\n                                >\n                                    <Form.Item\n                                        {...restField}\n                                        name={[name, 'itemId']}\n                                        wrapperCol={{ span: 24 }}\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Missing item',\n                                            },\n                                        ]}\n                                    >\n                                        <Select\n                                            showSearch\n                                            placeholder=\"items\"\n                                            optionFilterProp=\"label\"\n                                            popupMatchSelectWidth={false}\n                                            filterSort={(optionA, optionB) =>\n                                                (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                                            }\n                                            options={allItems}\n                                            style={{ width: '100%', maxWidth: '80px' }}\n                                        >\n                                        </Select>\n                                    </Form.Item>\n                                    <Form.Item\n                                        {...restField}\n                                        name={[name, 'quantity']}\n                                        wrapperCol={{ span: 24 }}\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Missing quantity',\n                                            },\n                                        ]}\n                                    >\n                                        <Input placeholder=\"Qtn\" type=\"number\" style={{ marginBottom: 0 }} onChange={handleItemTotal} />\n                                    </Form.Item>\n                                    <Form.Item\n                                        {...restField}\n                                        name={[name, 'unit']}\n                                        wrapperCol={{ span: 24 }}\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Missing unit',\n                                            },\n                                        ]}\n                                        initialValue={'kg'}\n                                    >\n                                        <Select\n                                            placeholder=\"units\"\n                                            style={{ width: '100%' }}\n                                        >\n                                            {ItemUnits.map(unit => (\n                                                <Select.Option key={unit} value={unit}>{unit}</Select.Option>\n                                            ))}\n                                        </Select>\n                                    </Form.Item>\n                                    <Form.Item\n                                        {...restField}\n                                        name={[name, 'rate']}\n                                        wrapperCol={{ span: 24 }}\n                                    >\n                                        <Input placeholder=\"Rate\" prefix=\"₹\" type=\"number\" style={{ marginBottom: 0 }} onChange={handleItemTotal} />\n                                    </Form.Item>\n                                    <MinusCircle size={24} color=\"#000\" style={{ marginBottom: \"-7px\" }} onClick={() => {\n                                        remove(name);\n                                        handleItemTotal()\n                                    }} />\n                                </Space>\n                            ))}\n                            <Form.Item\n                                wrapperCol={{ span: 24 }}\n                            >\n                                <Button type=\"dashed\" onClick={() => add()} block icon={<PlusCircle size={24} color=\"#000\" />}>\n                                    Add Item\n                                </Button>\n                                <Form.ErrorList errors={errors} />\n                            </Form.Item>\n                        </>\n                    )}\n                </Form.List>\n                <Form.List\n                    name=\"containers\"\n                >\n                    {(fields, { add, remove }, { errors }) => (\n                        <>\n                            {fields.map(({ key, name, ...restField }) => (\n                                <Space\n                                    key={key}\n                                    style={{\n                                        display: 'flex'\n                                    }}\n                                    align=\"baseline\"\n                                >\n                                    <Form.Item\n                                        {...restField}\n                                        name={[name, 'type']}\n                                        wrapperCol={{ span: 24 }}\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Missing type',\n                                            },\n                                        ]}\n                                    >\n                                        <Select\n                                            placeholder=\"type\"\n                                            style={{ width: '100%' }}\n                                            popupMatchSelectWidth={false}\n                                        >\n                                            {ContainerTypes.map(type => (\n                                                <Select.Option key={type} value={type}>{type}</Select.Option>\n                                            ))}\n                                        </Select>\n                                    </Form.Item>\n                                    <Form.Item\n                                        {...restField}\n                                        name={[name, 'quantity']}\n                                        wrapperCol={{ span: 24 }}\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Missing quantity',\n                                            },\n                                        ]}\n                                    >\n                                        <Input placeholder=\"Qtn\" type=\"number\" style={{ marginBottom: 0 }} />\n                                    </Form.Item>\n                                    <MinusCircle size={24} color=\"#000\" style={{ marginBottom: \"-7px\" }} onClick={() => remove(name)} />\n                                </Space>\n                            ))}\n                            <Form.Item\n                                wrapperCol={{ span: 24 }}\n                            >\n                                <Button type=\"dashed\" onClick={() => add()} block icon={<PlusCircle size={24} color=\"#000\" />}>\n                                    Add Containers\n                                </Button>\n                                <Form.ErrorList errors={errors} />\n                            </Form.Item>\n                        </>\n                    )}\n                </Form.List>\n                <div\n                    style={{\n                        textAlign: 'right',\n                    }}\n                >\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </div>\n\n            </Form>\n        </Modal>\n    );\n};\n\nexport default AddSalesOrder;\n","import { API_URL, request } from \"../../common-utils\";\n\nexport const fetchSalesOrder = (payload) => {\n    const url = `${API_URL}/saleOrder/list-all`;\n\n    return request({\n        url: url,\n        method: \"post\",\n        data: payload,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n\nexport const fetchAllContacts = () => {\n    const url = `${API_URL}/contact/list-all`;\n\n    return request({\n        url: url,\n        method: \"get\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n\nexport const fetchAllItems = () => {\n    const url = `${API_URL}/item/list-all`;\n\n    return request({\n        url: url,\n        method: \"get\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n\nexport const addSaleOrder = (payload) => {\n    const url = `${API_URL}/saleOrder/add-sale-order`;\n\n    return request({\n        url: url,\n        method: \"post\",\n        data: payload,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n\nexport const updateSaleOrder = (id, payload) => {\n    const url = `${API_URL}/saleOrder/update-sale-order/${id}`;\n\n    return request({\n        url: url,\n        method: \"post\",\n        data: payload,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n\nexport const updateSalesOrderStatus = (id, payload) => {\n    const url = `${API_URL}/saleOrder/update-sale-order-status/${id}`;\n\n    return request({\n        url: url,\n        method: \"post\",\n        data: payload,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n","import { Button } from \"antd\";\nimport styled from \"styled-components\";;\n\nexport const StyledPillButton = styled(Button)`\n  background: ${(props) =>\n    props.isActive ? props.activeBgc || \"\" : props.bgc || \"\"} !important;\n  width: ${(props) => (props.isActive ? props.activeW || \"\" : props.w || \"\")};\n  display: ${(props) => props.d || \"\"};\n  height: ${(props) => props.h || \"\"};\n  font-size: ${(props) => props.fs || \"16px\"};\n  font-weight: ${(props) => props.fw || \"500\"};\n  font-family: ${(props) => props.ff};\n  margin: ${(props) => props.m || \"\"};\n  margin-right: ${(props) => props.mr || \"\"};\n  padding: ${(props) => props.p || \"\"};\n  border: ${(props) =>\n    props.b || \"1px solid rgba(217, 217, 217, 1)\"} !important;\n  border-radius: ${(props) => props.br || \"45px\"};\n  color: ${(props) =>\n    props.isActive\n      ? props.activeC || \"rgba(255, 255, 255, 1)\"\n      : props.c || \"rgba(48, 48, 48, 1)\"} !important;\n  margin-bottom: ${(props) => props.mb || \"\"};\n  margin-top: ${(props) => props.mt || \"\"};\n  ${(props) => props.bottom && `bottom: ${props.bottom};`}\n  &:focus {\n    background: ${(props) => props.focusbgc || \"\"} !important;\n    border: ${(props) => props.b || \"\"} !important;\n  }\n  &:disabled {\n    background: grey !important;\n    color: #ccc !important;\n    cursor: not-allowed !important;\n    border: none !important;\n  }\n`;\nexport const StyledButton = styled(Button)`\n  background: ${(props) => props.bgc || \"#FFF\"} !important;\n  width: ${(props) => props.w || \"\"};\n  display: ${(props) => props.d || \"\"};\n  height: ${(props) => props.h || \"46px\"};\n  font-size: ${(props) => props.fs || \"16px\"};\n  font-weight: ${(props) => props.fw || \"500\"};\n  font-family: ${(props) => props.ff};\n  margin: ${(props) => props.m || \"\"};\n  margin-right: ${(props) => props.mr || \"\"};\n  padding: ${(props) => props.p || \"\"};\n  border: ${(props) => props.b || \"\"} !important;\n  border-radius: ${(props) => props.br || \"10px\"};\n  color: ${(props) => props.c || \"#3465FF\"} !important;\n  margin-bottom: ${(props) => props.mb || \"\"};\n  margin-top: ${(props) => props.mt || \"\"};\n  ${(props) => props.bottom && `bottom: ${props.bottom};`}\n\n  &:hover {\n    background: ${(props) =>\n      props.hoverbgc ? props.hoverbgc : props.bgc || \"\"} !important;\n    border: ${(props) => props.b || \"0px\"} !important;\n    color: ${(props) => props.c || \"#3465FF\"} !important;\n  }\n  &:focus {\n    background: ${(props) => props.focusbgc || \"\"} !important;\n    border: ${(props) => props.b || \"\"} !important;\n    color: ${(props) => props.c || \"#3465FF\"} !important;\n  }\n  &:disabled {\n    background: grey !important;\n    color: #ccc !important;\n    cursor: not-allowed !important;\n    border: none !important;\n  }\n`;\n","import React from \"react\";\n\nconst EditableContext = React.createContext(null);\nexport default EditableContext;","import { useContext, useEffect, useRef, useState } from \"react\";\nimport { Form, Input, Select } from \"antd\";\nimport EditableContext from \"./CommonContext\";\nimport { ContainerTypes, ItemUnits } from \"../../common-utils\";\n\nexport const ItemTableEditableCell = ({\n    title,\n    editable,\n    children,\n    dataIndex,\n    record,\n    allItems,\n    itemNameToIdMap,\n    handleSave,\n    ...restProps\n}) => {\n    const [editing, setEditing] = useState(false);\n    const inputRef = useRef(null);\n    const form = useContext(EditableContext);\n    useEffect(() => {\n        if (editing) {\n            inputRef.current?.focus();\n        }\n    }, [editing]);\n    const toggleEdit = () => {\n        setEditing(!editing);\n        form.setFieldsValue({\n            [dataIndex]: record[dataIndex],\n        });\n    };\n    const save = async () => {\n        try {\n            const values = await form.validateFields();\n            toggleEdit();\n            switch(dataIndex) {\n                case \"itemId\":\n                    values.itemDetails = {\n                        ...values.itemDetails,\n                        name: itemNameToIdMap.get(values.itemId)\n                    }\n                    break;\n                case \"quantity\":\n                case \"rate\":\n                    const { rate, quantity } = values;\n                    values.itemTotal = ((rate || record.rate) * (quantity || record.quantity)) || 0;\n                    break;\n                default:\n            }\n            handleSave({\n                ...record,\n                ...values,\n            });\n        } catch (errInfo) {\n            console.log('Save failed:', errInfo);\n        }\n    };\n\n    const formField = () => {\n        switch(dataIndex) {\n            case \"itemId\":\n                return <Select\n                        showSearch\n                        ref={inputRef}\n                        optionFilterProp=\"label\"\n                        popupMatchSelectWidth={false}\n                        filterSort={(optionA, optionB) =>\n                            (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                        }\n                        options={allItems}\n                        onChange={save}\n                        onBlur={save}\n                    >\n                    </Select>\n            case \"unit\":\n                return <Select \n                        placeholder=\"units\"\n                        style={{width: '100%'}}\n                        onChange={save}\n                        onBlur={save}\n                    >\n                        {ItemUnits.map(unit => (\n                            <Select.Option key={unit} value={unit}>{unit}</Select.Option>\n                        ))}\n                    </Select>\n            case \"rate\":\n            case \"quantity\":\n                return <Input ref={inputRef} onPressEnter={save} onBlur={save} type=\"number\" />;\n            default:\n                return <Input ref={inputRef} onPressEnter={save} onBlur={save} />;\n        }\n    }\n    let childNode = children;\n    if (editable) {\n        childNode = editing ? (\n            <Form.Item\n                style={{ margin: 0 }}\n                name={dataIndex}\n                rules={[{ required: true, message: `${title} is required.` }]}\n            >\n                { formField() }\n            </Form.Item>\n        ) : (\n            <div\n                className=\"editable-cell-value-wrap\"\n                style={{\n                    paddingInlineEnd: 24,\n                }}\n                onClick={toggleEdit}\n            >\n                {children}\n            </div>\n        );\n    }\n    return <td {...restProps}>{childNode}</td>;\n};\n\nexport const ContainerTableEditableCell = ({\n    title,\n    editable,\n    children,\n    dataIndex,\n    record,\n    allAgents,\n    itemNameToIdMap,\n    handleSave,\n    ...restProps\n}) => {\n    const [editing, setEditing] = useState(false);\n    const inputRef = useRef(null);\n    const form = useContext(EditableContext);\n    useEffect(() => {\n        if (editing) {\n            inputRef.current?.focus();\n        }\n    }, [editing]);\n    const toggleEdit = () => {\n        setEditing(!editing);\n        form.setFieldsValue({\n            [dataIndex]: record[dataIndex],\n        });\n    };\n    const save = async () => {\n        try {\n            const values = await form.validateFields();\n            toggleEdit();\n            handleSave({\n                ...record,\n                ...values,\n            });\n        } catch (errInfo) {\n            console.log('Save failed:', errInfo);\n        }\n    };\n\n    const formField = () => {\n        switch(dataIndex) {\n            case \"type\":\n                return <Select\n                        showSearch\n                        ref={inputRef}\n                        optionFilterProp=\"label\"\n                        popupMatchSelectWidth={false}\n                        filterSort={(optionA, optionB) =>\n                            (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                        }\n                        options={ContainerTypes.map(type => ({label: type, value: type}))}\n                        onChange={save}\n                        onBlur={save}\n                    >\n                    </Select>\n            case \"quantity\":\n                return <Input ref={inputRef} onPressEnter={save} onBlur={save} type=\"number\" />;\n            default:\n                return <Input ref={inputRef} onPressEnter={save} onBlur={save} />;\n        }\n    }\n    let childNode = children;\n    if (editable) {\n        childNode = editing ? (\n            <Form.Item\n                style={{ margin: 0 }}\n                name={dataIndex}\n                rules={[{ required: true, message: `${title} is required.` }]}\n            >\n                { formField() }\n            </Form.Item>\n        ) : (\n            <div\n                className=\"editable-cell-value-wrap\"\n                style={{\n                    paddingInlineEnd: 24,\n                }}\n                onClick={toggleEdit}\n            >\n                {children}\n            </div>\n        );\n    }\n    return <td {...restProps}>{childNode}</td>;\n};","import { Form } from \"antd\";\nimport EditableContext from \"./CommonContext\";\n\nexport const ItemTableEditableRow = ({ index, ...props }) => {\n    const [form] = Form.useForm();\n    return (\n        <Form form={form} component={false}>\n            <EditableContext.Provider value={form}>\n                <tr {...props} />\n            </EditableContext.Provider>\n        </Form>\n    );\n};\n\nexport const ContainerTableEditableRow = ({ index, ...props }) => {\n    const [form] = Form.useForm();\n    return (\n        <Form form={form} component={false}>\n            <EditableContext.Provider value={form}>\n                <tr {...props} />\n            </EditableContext.Provider>\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Button, DatePicker, message, Modal, Radio, Select, Table } from \"antd\";\nimport { MinusCircle, PlusCircle } from \"@phosphor-icons/react\";\nimport dayjs from 'dayjs';\nimport { updateSaleOrder } from \"../../api/sales\";\nimport { handleCatch, handleTableChange } from \"../../common-utils\";\nimport { ColFlex, RowFlex, StyledText } from \"../../Styled/Layout\";\nimport { ContainerTableEditableCell, ItemTableEditableCell } from \"./EditableCell\";\nimport { ContainerTableEditableRow, ItemTableEditableRow } from \"./EditableRow\";\nimport { StyledPillButton } from \"../../Styled/Button\";\n\nconst EditSalesOrder = (props) => {\n    const { open, onClose, saleOrder, allContacts, allItems, allAgents, itemNameToIdMap } = props;\n    const [contactId, setContactId] = useState(null);\n    const [agentId, setAgentId] = useState(null);\n    const [lineItems, setLineItems] = useState([]);\n    const [container, setContainers] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [date, setDate] = useState(null);\n    const [saleType, setSaleType] = useState();\n    const pageSize = 10;\n\n    const onFinish = async () => {\n        if (!saleOrder) {\n            message.error('Sale order not found');\n            return;\n        }\n        setLoading(true);\n        const saleOrderData = {};\n        if (contactId?.value && contactId.value != saleOrder.contactId) {\n            saleOrderData.contactId = contactId.value;\n        }\n        if (saleType != saleOrder.saleType) {\n            saleOrderData.saleType = saleType;\n        }\n        if(saleType == \"interState\" && agentId?.value && agentId.value != saleOrder.agentId) {\n            saleOrderData.agentId = agentId.value;\n        } else if(saleType == \"local\" && saleOrder.agentId != null) {\n            saleOrderData.agentId = null;\n        }\n        if (!dayjs(saleOrder.date).isSame(date, 'day')) {\n            saleOrderData.date = date.valueOf();\n        }\n        try {\n            await updateSaleOrder(saleOrder.id, {\n                saleOrder: saleOrderData,\n                lineItems,\n                containers: container\n            });\n            message.success('sale order updated successfully');\n        } catch (err) {\n            handleCatch(err);\n            onClose();\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleAdd = () => {\n        const newData = {\n            \"id\": lineItems.length,\n            \"itemId\": 1,\n            \"itemTotal\": 0,\n            \"quantity\": \"\",\n            \"rate\": \"\",\n            \"unit\": \"kg\",\n            \"itemDetails\": {\n                \"name\": \"broccoli\"\n            }\n        };\n        const updatedLineItems = [...lineItems, newData];\n        setLineItems(updatedLineItems);\n\n        if (Math.ceil(updatedLineItems.length / pageSize) > 1) {\n            setCurrentPage(Math.ceil(updatedLineItems.length / pageSize));\n        }\n    };\n\n    const handleDelete = (id) => {\n        if (lineItems.length <= 1) {\n            message.error('At least one item should be present');\n            return;\n        }\n        const newData = lineItems.filter((item) => item.id !== id);\n        setLineItems(newData);\n    };\n\n    const handleSave = (row) => {\n        const newData = [...lineItems];\n        const index = newData.findIndex((item) => row.id === item.id);\n        const item = newData[index];\n        newData.splice(index, 1, {\n            ...item,\n            ...row,\n        });\n        setLineItems(newData);\n    };\n\n    const handleContainerAdd = () => {\n        const newData = {\n            \"id\": container.length,\n            \"type\": \"whiteBox\",\n            \"quantity\": 1\n        };\n        const updatedContainers = [...container, newData];\n        setContainers(updatedContainers);\n    };\n\n    const handleContainerDelete = (id) => {\n        const newData = container.filter((item) => item.id !== id);\n        setContainers(newData);\n    };\n\n    const handleContainerSave = (row) => {\n        const newData = [...container];\n        const index = newData.findIndex((item) => row.id === item.id);\n        const item = newData[index];\n        newData.splice(index, 1, {\n            ...item,\n            ...row,\n        });\n        setContainers(newData);\n    };\n\n    const itemsTableColumn = [\n        {\n            title: 'Item Name',\n            dataIndex: 'itemId',\n            render: (data) => <>{itemNameToIdMap.get(data)}</>\n        },\n        {\n            title: 'Qtn',\n            dataIndex: 'quantity',\n        },\n        {\n            title: 'unit',\n            dataIndex: 'unit',\n        },\n        {\n            title: 'rate',\n            dataIndex: 'rate',\n        }\n    ];\n    const containerTableColumn = [\n        {\n            title: 'type',\n            dataIndex: 'type',\n            editable: true,\n            onCell: (record) => ({\n                record,\n                editable: true,\n                dataIndex: 'type',\n                title: 'type',\n                handleSave: handleContainerSave\n            }),\n        },\n        {\n            title: 'Qtn',\n            dataIndex: 'quantity',\n            editable: true,\n            onCell: (record) => ({\n                record,\n                editable: true,\n                dataIndex: 'quantity',\n                title: 'Qtn',\n                handleSave: handleContainerSave\n            }),\n        },\n        {\n            width: 1,\n            render: (_, record, i) =>\n                lineItems.length >= 1 ? (\n                    <MinusCircle size={24} color=\"rgb(140,140,140)\" onClick={() => handleContainerDelete(record.id)} />\n                ) : null,\n        }\n    ];\n\n    const columns = [...(itemsTableColumn.map((col) => {\n        return {\n            ...col,\n            editable: true,\n            onCell: (record) => ({\n                record,\n                editable: true,\n                dataIndex: col.dataIndex,\n                title: col.title,\n                allItems,\n                itemNameToIdMap,\n                handleSave,\n            }),\n        };\n    })),\n    {\n        width: 1,\n        render: (_, record) =>\n            lineItems.length >= 1 ? (\n                <MinusCircle size={24} color=\"rgb(140,140,140)\" onClick={() => handleDelete(record.id)} />\n            ) : null,\n    }\n    ];\n\n    useEffect(() => {\n        const { date, items, saleType, contactId, agentId, containers } = saleOrder || {};\n        setLineItems(items || []);\n        setContainers(containers || []);\n        setDate(dayjs(date));\n        setSaleType(saleType);\n        setContactId(contactId);\n        setAgentId(agentId)\n    }, [saleOrder]);\n\n    return (\n        <Modal\n            title=\"Edit Sale\"\n            footer={null}\n            loading={loading}\n            open={open}\n            onCancel={onClose}\n            styles={{ content: { padding: '10px' } }}\n            style={{ maxWidth: \"fit-content\", top: '50px' }}\n            width=\"fit-content\"\n        >\n            <ColFlex gap=\"15px\">\n                <DatePicker value={date} style={{ alignSelf: \"end\", marginTop: \"10px\" }} format=\"DD/MM/YYYY\" onChange={(e, v) => setDate(dayjs(v, \"DD/MM/YYYY\"))} />\n                <Select\n                    showSearch\n                    value={contactId}\n                    placeholder=\"Select Customers\"\n                    optionFilterProp=\"label\"\n                    filterSort={(optionA, optionB) =>\n                        (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                    }\n                    options={allContacts}\n                    style={{ width: '100%' }}\n                    onChange={(e, v) => setContactId(v)}\n                />\n                <RowFlex m=\"0\">\n                    <StyledText m=\"auto 20px auto 0\" fs=\"14px\" ff=\"Inter\">Sale Type : </StyledText>\n                    <Radio.Group\n                        options={[\n                            { label: \"Local\", value: \"local\" },\n                            { label: \"InterState\", value: \"interState\" }\n                        ]}\n                        value={saleType}\n                        optionType=\"button\"\n                        onChange={(e) => setSaleType(e.target.value)}\n                    />\n                </RowFlex>\n                {saleType == \"interState\" &&\n                    <RowFlex m=\"0\">\n                        <StyledText m=\"auto 20px auto 0\" fs=\"14px\" ff=\"Inter\">Agent : </StyledText>\n                        <Select\n                            showSearch\n                            value={agentId}\n                            placeholder=\"Select Agent\"\n                            optionFilterProp=\"label\"\n                            popupMatchSelectWidth={false}\n                            filterSort={(optionA, optionB) =>\n                                (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                            }\n                            options={allAgents}\n                            onChange={(e, v) => setAgentId(v)}\n                        />\n                    </RowFlex>}\n                <Table\n                    bordered\n                    size=\"middle\"\n                    columns={columns}\n                    dataSource={lineItems}\n                    rowClassName={() => 'editable-row'}\n                    pagination={{\n                        position: [\"none\", \"bottomCenter\"],\n                        pageSize,\n                        onChange: (p) => handleTableChange(p, setCurrentPage),\n                        current: currentPage\n                    }}\n                    components={{\n                        body: {\n                            row: ItemTableEditableRow,\n                            cell: ItemTableEditableCell,\n                        }\n                    }}\n                    footer={() => <Button type=\"dashed\" onClick={handleAdd} block icon={<PlusCircle size={24} color=\"rgb(140,140,140)\" />}>\n                        Add Item\n                    </Button>\n                    }\n                    style={{ width: '100%', marginLeft: 0 }}\n                />\n                <Table\n                    bordered\n                    size=\"middle\"\n                    columns={containerTableColumn}\n                    dataSource={container}\n                    rowClassName={() => 'editable-row'}\n                    pagination={false}\n                    components={{\n                        body: {\n                            row: ContainerTableEditableRow,\n                            cell: ContainerTableEditableCell,\n                        }\n                    }}\n                    footer={() => <Button type=\"dashed\" onClick={handleContainerAdd} block icon={<PlusCircle size={24} color=\"rgb(140,140,140)\" />}>\n                        Add Container\n                    </Button>\n                    }\n                    style={{ width: '100%', marginLeft: 0 }}\n                />\n                <StyledPillButton c=\"#fff\" w=\"80px\" h=\"42px\" type=\"primary\" onClick={onFinish} style={{ alignSelf: \"center\" }}>\n                    Save\n                </StyledPillButton>\n            </ColFlex>\n        </Modal>\n    );\n};\n\nexport default EditSalesOrder;\n","import dayjs from 'dayjs';\nconst XLSX = require(\"xlsx\");\n// import XLSX from 'xlsx';\n\nexport const downloadExcel = (salesData, startDate, endDate) => {\n    // Helper to format date\n    const formatDate = (dateString) => dayjs(dateString).format(\"DD-MM-YYYY\");\n\n    // Group sales data by date\n    const salesByDate = salesData.reduce((acc, order) => {\n        const date = formatDate(order.date);\n        if (!acc[date]) acc[date] = [];\n        acc[date].push(order);\n        return acc;\n    }, {});\n\n    // Create a new workbook\n    const workbook = XLSX.utils.book_new();\n\n    Object.keys(salesByDate).forEach(date => {\n        // Prepare data rows for each date\n        const dataRows = salesByDate[date].flatMap(order =>\n            order.items.map((item, index) => ({\n                \"Contact Name\": index === 0 ? order.contactName : \"\",\n                \"Sales Order Number\": index === 0 ? order.salesOrderNumber : \"\",\n                \"Sale Type\": index === 0 ? order.saleType : \"\",\n                \"Status\": index === 0 ? order.status : \"\",\n                \"Invoice Status\": index === 0 ? order.invoiceStatus : \"\",\n                \"Date\": index === 0 ? formatDate(order.date) : \"\",\n                \"Amount\": index === 0 ? order.amount : \"\",\n                \"Item Name\": item.itemDetails.name,\n                \"Rate\": item.rate,\n                \"Quantity\": item.quantity,\n                \"Unit\": item.unit,\n                \"Item Total\": item.itemTotal\n            }))\n        );\n\n        // Create a worksheet for each date\n        const worksheet = XLSX.utils.json_to_sheet(dataRows);\n        XLSX.utils.book_append_sheet(workbook, worksheet, date);\n    });\n\n    // Write workbook to file\n    XLSX.writeFile(workbook, `${startDate}-${endDate}_sales.xlsx`);\n\n    console.log(\"Excel file has been created successfully.\");\n}\n","import { useEffect, useState } from \"react\";\nimport { DatePicker, Descriptions, message, Select, Table } from \"antd\";\nimport { addCommas, checkAccess, handleCatch, screenHeight } from \"../../common-utils\";\nimport CommonHeader from \"../../Components/CommonHeader\";\nimport { ColFlex, RowFlex, StyledDiv, StyledText } from \"../../Styled/Layout\";\nimport { statusDesign } from \"../../Components/TableColumns\";\nimport { fetchAllContacts, fetchAllItems, fetchSalesOrder, updateSalesOrderStatus } from \"../../api/sales\";\nimport AddSalesOrder from \"../../Components/AddSalesOrderModal\";\nimport { StyledButton } from \"../../Styled/Button\";\nimport { CaretCircleLeft, CaretCircleRight, DownloadSimple, Plus } from \"@phosphor-icons/react\";\nimport EditSalesOrder from \"../../Components/EditSalesOrderModal\";\nimport { PencilSimple } from \"@phosphor-icons/react\";\nimport { Tag } from \"antd\";\nimport dayjs from 'dayjs';\nimport { downloadExcel } from \"../../Utils/excel\";\nimport { fetchAllAgents } from \"../../api\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst SaleOrderStatus = [\n  {value: 'PENDING', label: <StyledText ta=\"left\" fs=\"14px\" fw=\"600\" c={statusDesign['PENDING']}>Pending</StyledText>},\n  {value: 'PACKED', label: <StyledText ta=\"left\" fs=\"14px\" fw=\"600\" c={statusDesign['PACKED']}>Packed</StyledText>},\n  {value: 'SENT', label: <StyledText ta=\"left\" fs=\"14px\" fw=\"600\" c={statusDesign['SENT']}>Sent</StyledText>},\n  {value: 'DONE', label: <StyledText ta=\"left\" fs=\"14px\" fw=\"600\" c={statusDesign['DONE']}>Done</StyledText>},\n  {value: 'CANCELLED', label: <StyledText ta=\"left\" fs=\"14px\" fw=\"600\" c={statusDesign['CANCELLED']}>Cancelled</StyledText>}\n];\n\nconst SaleOrder = () => {\n  const navigate = useNavigate();\n  const [saleOrderData, setSaleOrderData] = useState([]);\n  const [filteredSaleOrders, setFilteredSaleOrders] = useState([]);\n  const [addSaleModalOpen, setAddSaleModalOpen] = useState(false);\n  const [editSaleModalOpen, setEditSaleModalOpen] = useState(false);\n  const [selectedSaleOrder, setSelectedSaleOrder] = useState(null);\n  const [allContacts, setAllContacts] = useState([]);\n  const [itemNameToIdMap, setItemNameToIdMap] = useState(new Map());\n  const [allItems, setAllItems] = useState([]);\n  const [allAgents, setAllAgents] = useState([]);\n  const [date, setDate] = useState([dayjs(), dayjs()]);\n  const [isdateChangeBtnVisible, setIsdateChangeBtnVisible] = useState(true);\n\n  //filters\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [selectedStatus, setSelectedStatus] = useState(null);\n\n  const handleStatusChange = async (id, status, newStatus) => {\n    try {\n      // Optimistically update the table\n      const updatedData = filteredSaleOrders.map((item) => \n        item.id === id ? { ...item, status: newStatus } : item\n      );\n      setFilteredSaleOrders(updatedData);\n  \n      // Send the update to the backend\n      const response = await updateSalesOrderStatus(id, { status: newStatus });\n    } catch (error) {\n      handleCatch(error);\n  \n      // Revert the optimistic update if the API call fails\n      const originalData = filteredSaleOrders.map((item) =>\n        item.id === id ? { ...item, status: status } : item\n      );\n      setFilteredSaleOrders(originalData);\n    }\n  };\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'contactName',\n      filteredValue: selectedContact && [selectedContact],\n      onFilter: (value, record) => record.contactId == value\n    }\n  ];\n\n  if (checkAccess('EDIT_SALE_ORDER')) {\n    columns.push({\n      title: 'Status',\n      dataIndex: 'status',\n      filteredValue: selectedStatus && [selectedStatus],\n      onFilter: (value, record) => record.status == value,\n      render: (data, record) => <Select\n          value={data}\n          options={SaleOrderStatus}\n          style={{ width: 'fit-content'}}\n          popupMatchSelectWidth={false}\n          onClick={(e) => e.stopPropagation()}\n          onChange={(newStatus) => handleStatusChange(record.id, data, newStatus)}\n      />\n    },{\n      key: 'action',\n      render: (_, rowData) => <PencilSimple size={18} color=\"rgba(0, 0, 0, 0.58)\" weight=\"fill\" onClick={(e) => {\n        e.stopPropagation();\n        setSelectedSaleOrder(rowData);\n        setEditSaleModalOpen(true);\n      }} />,\n      width: 1\n    })\n  } else {\n    columns.push({\n      title: 'Status',\n      dataIndex:'status',\n      render: (data) => <Tag color={statusDesign[data]}>\n        {data.toLowerCase()}\n      </Tag>\n    })\n  }\n\n  const itemsTableColumn = [\n    {\n      title: 'Item Name',\n      dataIndex: 'itemId',\n      render: (data) => <>{allItems.find((e) => e.value == data).label}</>\n    },\n    {\n      title: 'Qtn',\n      dataIndex: 'quantity',\n    },\n    {\n      title: 'unit',\n      dataIndex: 'unit',\n    },\n    {\n      title: 'rate',\n      dataIndex: 'rate',\n    }\n  ];\n\n  const handleDownload = () => {\n    if(!filteredSaleOrders?.length){\n      message.error(\"No Sale Order Found!!\");\n      return;\n    }\n    downloadExcel(filteredSaleOrders, date[0].format(\"DD/MM/YYYY\"), date[1].format(\"DD/MM/YYYY\"))\n  }\n\n  const HeaderContent = () => {\n    return (\n      <RowFlex m=\"0\" gap=\"20px\">\n        <StyledButton\n          h=\"36px\"\n          onClick={() => setAddSaleModalOpen(true)}\n          icon={<Plus size={18} color=\"#000\" />}\n          >\n          Add\n        </StyledButton>\n        <DownloadSimple size={24} color=\"#fff\" style={{ alignSelf: \"end\", margin: \"auto\" }} onClick={handleDownload} />\n      </RowFlex>\n    )\n  }\n\n  const getAllContacts = async () => {\n    try {\n      const res = await fetchAllContacts();\n      if (res.status == 200) {\n        const contactForSelect = res.data?.map((contact) => {\n          return {\n            value: contact.id,\n            label: contact.displayName || \"-\"\n          }\n        })\n        setAllContacts(contactForSelect);\n      }\n    } catch (err) {\n      handleCatch(err);\n    }\n  }\n\n  const getAllItems = async () => {\n    try {\n      const res = await fetchAllItems();\n      if (res.status == 200) {\n        const itemsMap = new Map();\n        const itemsForSelect = res.data?.map((item) => {\n          if (!itemsMap.has(item.id)) itemsMap.set(item.id, item.name);\n          return {\n            value: item.id,\n            label: item.name\n          }\n        })\n        setAllItems(itemsForSelect);\n        setItemNameToIdMap(itemsMap);\n      }\n    } catch (err) {\n      handleCatch(err);\n    }\n  }\n\n  const getAllAgents = async () => {\n    try {\n      const res = await fetchAllAgents();\n      if (res.status == 200) {\n        const AgentsForSelect = res.data?.map((agent) => {\n          return {\n            value: agent.id,\n            label: agent.displayName\n          }\n        })\n        setAllAgents(AgentsForSelect);\n      }\n    } catch (err) {\n      handleCatch(err);\n    }\n  }\n\n  const fetchOrders = async () => {\n    try {\n      const res = await fetchSalesOrder({\n        startDate: date[0].startOf('day').valueOf(),\n        endDate: date[1].endOf('day').valueOf()\n      });\n      if (res.status == 200) {\n        setSaleOrderData(res.data);\n        setFilteredSaleOrders(res.data);\n      }\n    } catch (err) {\n      handleCatch(err);\n    }\n  }\n\n  const onDateChange = (_, dates) => {\n    const dateFunc = dates.map(date => dayjs(date, \"DD/MM/YYYY\"))\n    setDate(dateFunc);\n  }\n  const updateDate = (days) => {\n    const updatedDate = date[0].add(days, 'day');\n    setDate([updatedDate, updatedDate]);\n  };\n\n  const ItemTable = (props) => {\n    return (\n      <Table\n        bordered\n        style={{ width: '100%', marginLeft: 0 }}\n        size=\"middle\"\n        pagination={{\n          position: [\"none\", \"bottomCenter\"],\n          pageSize: 5\n        }}\n        columns={itemsTableColumn}\n        dataSource={props.itemData || []}\n      />\n    )\n  }\n\n  const clearFilter = () => {\n    setSelectedContact(null);\n    setSelectedStatus(null);\n  }\n\n  useEffect(() => {\n    // Toggle date change button visibility based on date comparison\n    setIsdateChangeBtnVisible(date[0].isSame(date[1], 'day'));\n\n    // fetch orders\n    fetchOrders();\n  }, [date]);\n\n  useEffect(() => {\n    getAllContacts();\n    getAllItems();\n    getAllAgents();\n  }, []);\n\n  return (\n    <ColFlex ai=\"center\" minH={false ? `${screenHeight}` : \"100vh\"} maxW=\"500px\" w=\"100%\" bgc=\"#fff\" style={{ position: \"relative\" }}>\n      <CommonHeader title=\"Sales\" onBack={()=>navigate(-1)} rightContent={checkAccess('EDIT_SALE_ORDER') ? <HeaderContent /> : null} />\n      <ColFlex m=\"0\" w=\"100%\" p=\"20px\" gap=\"20px\">\n        {\n          checkAccess('EDIT_SALE_ORDER') && \n          <RowFlex w=\"100%\" m=\"0\" gap=\"20px\">\n            <CaretCircleLeft size={32} color=\"#8c8c8c\" display={isdateChangeBtnVisible ? \"block\" : \"none\"} onClick={()=>updateDate(-1)} />\n            <DatePicker.RangePicker value={date} style={{ alignSelf: \"end\", width: \"100%\" }} onChange={onDateChange} format=\"DD/MM/YYYY\" popupClassName=\"yolup\" />\n            <CaretCircleRight size={32} color=\"#8c8c8c\" display={isdateChangeBtnVisible ? \"block\" : \"none\"} onClick={()=>updateDate(1)} />\n          </RowFlex>\n        }\n        <RowFlex w=\"100%\" m=\"0\" gap=\"10px\">\n          <Select\n              showSearch\n              value={selectedContact}\n              placeholder=\"customers\"\n              optionFilterProp=\"label\"\n              popupMatchSelectWidth={false}\n              filterSort={(optionA, optionB) =>\n                  (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n              }\n              options={allContacts}\n              style={{ minWidth: '40%', width: '100%' }}\n              onChange={(e) => setSelectedContact(e)}\n          />\n          <Select\n              value={selectedStatus}\n              options={SaleOrderStatus}\n              placeholder=\"status\"\n              style={{ width: 'fit-content'}}\n              popupMatchSelectWidth={false}\n              onChange={(newStatus) => setSelectedStatus(newStatus)}\n          />\n          <StyledButton h=\"32px\" fs=\"14px\" onClick={clearFilter}>Reset</StyledButton>\n        </RowFlex>\n        <Table\n          style={{ width: '100%' }}\n          size=\"middle\"\n          pagination={{\n            position: [\"none\", \"bottomCenter\"],\n            pageSize: 15\n          }}\n          columns={columns}\n          dataSource={filteredSaleOrders || []}\n          expandable={{\n            expandIcon: () => null,\n            expandIconColumnIndex: -1,\n            expandRowByClick: true,\n            expandedRowRender: (record) => <StyledDiv id=\"1234\" w=\"100%\">\n              <ItemTable itemData={record.items} />\n              <Descriptions\n                title=\"\"\n                size=\"small\"\n                style={{marginBottom: \"10px\"}}\n                layout=\"vertical\"\n                bordered\n                column={{ xs: 2 }}\n                items={[\n                  {\n                    key: '1',\n                    label: 'Agent',\n                    children: record.agentName,\n                  },{\n                    key: '2',\n                    label: 'Containers',\n                    children: record.containers?.map((e)=><>{e.type} : {e.quantity}<br/></>),\n                  },\n                  {\n                    key: '3',\n                    label: 'Total',\n                    children: `₹ ${addCommas(record.items.reduce((curr, acc) => {\n                      return curr + (acc.itemTotal || 0);\n                    }, 0))}`,\n                  }\n                ]}\n              />\n            </StyledDiv>\n          }}\n          rowKey={(_, i) => i}\n        />\n      </ColFlex>\n      <AddSalesOrder\n        open={addSaleModalOpen}\n        onClose={() => setAddSaleModalOpen(false)}\n        allContacts={allContacts}\n        getAllContacts={getAllContacts}\n        allItems={allItems}\n        getAllItems={getAllItems}\n        allAgents={allAgents}\n        fetchOrders={fetchOrders}\n      />\n      <EditSalesOrder\n        open={editSaleModalOpen}\n        onClose={() => setEditSaleModalOpen(false)}\n        saleOrder={selectedSaleOrder}\n        allContacts={allContacts}\n        allItems={allItems}\n        allAgents={allAgents}\n        itemNameToIdMap={itemNameToIdMap}\n      />\n    </ColFlex>\n  );\n};\n\nexport default SaleOrder;\n"],"names":["props","title","onBack","rightContent","_jsxs","RowFlex","w","h","m","p","bg","children","gap","_jsx","CaretLeft","size","color","onClick","StyledText","fs","lh","fw","ff","c","mb","statusDesign","dateTimestamp","dayjs","valueOf","open","onClose","allContacts","allItems","allAgents","fetchOrders","loading","setLoading","useState","totalAmount","setTotalAmount","form","Form","useForm","handleItemTotal","lineItems","getFieldValue","total","item","quantity","rate","closePopup","resetFields","Modal","footer","onCancel","styles","content","padding","style","top","StyledDiv","pos","right","fontWeight","fontSize","addCommas","labelCol","xs","span","sm","wrapperCol","initialValues","saleType","date","layout","maxWidth","margin","onFinish","async","_values$lineItems","payload","saleOrder","contactId","values","agentId","map","itemId","type","unit","itemTotal","containers","url","API_URL","request","method","data","headers","addSaleOrder","message","success","err","handleCatch","Item","name","textAlign","rules","required","getValueProps","value","Number","normalize","DatePicker","format","Select","showSearch","placeholder","optionFilterProp","filterSort","optionA","optionB","_optionA$label","_optionB$label","label","toLowerCase","localeCompare","options","Radio","noStyle","shouldUpdate","prevValues","currentValues","_ref","popupMatchSelectWidth","_optionA$label2","_optionB$label2","List","validator","_","names","length","Promise","reject","Error","fields","_ref2","_ref3","add","remove","errors","_Fragment","_ref4","key","restField","Space","display","align","_optionA$label3","_optionB$label3","width","Input","marginBottom","onChange","initialValue","ItemUnits","Option","prefix","MinusCircle","Button","block","icon","PlusCircle","ErrorList","_ref5","_ref6","_ref7","ContainerTypes","htmlType","StyledPillButton","styled","isActive","activeBgc","bgc","activeW","d","mr","b","br","activeC","mt","bottom","focusbgc","StyledButton","hoverbgc","React","ItemTableEditableCell","editable","dataIndex","record","itemNameToIdMap","handleSave","restProps","editing","setEditing","inputRef","useRef","useContext","EditableContext","useEffect","_inputRef$current","current","focus","toggleEdit","setFieldsValue","save","validateFields","itemDetails","get","errInfo","console","log","formField","ref","onBlur","onPressEnter","childNode","className","paddingInlineEnd","ContainerTableEditableCell","_inputRef$current2","ItemTableEditableRow","index","component","Provider","ContainerTableEditableRow","setContactId","setAgentId","setLineItems","container","setContainers","currentPage","setCurrentPage","setDate","setSaleType","handleAdd","newData","updatedLineItems","Math","ceil","row","findIndex","id","splice","handleContainerAdd","updatedContainers","handleContainerSave","containerTableColumn","onCell","render","i","filter","handleContainerDelete","columns","col","error","handleDelete","items","ColFlex","alignSelf","marginTop","e","v","optionType","target","Table","bordered","dataSource","rowClassName","pagination","position","pageSize","handleTableChange","components","body","cell","marginLeft","saleOrderData","isSame","updateSaleOrder","XLSX","require","SaleOrderStatus","ta","SaleOrder","navigate","useNavigate","setSaleOrderData","filteredSaleOrders","setFilteredSaleOrders","addSaleModalOpen","setAddSaleModalOpen","editSaleModalOpen","setEditSaleModalOpen","selectedSaleOrder","setSelectedSaleOrder","setAllContacts","setItemNameToIdMap","Map","setAllItems","setAllAgents","isdateChangeBtnVisible","setIsdateChangeBtnVisible","selectedContact","setSelectedContact","selectedStatus","setSelectedStatus","handleStatusChange","status","newStatus","updatedData","updateSalesOrderStatus","originalData","filteredValue","onFilter","checkAccess","push","stopPropagation","rowData","PencilSimple","weight","Tag","itemsTableColumn","find","handleDownload","downloadExcel","salesData","startDate","endDate","formatDate","dateString","salesByDate","reduce","acc","order","workbook","utils","book_new","Object","keys","forEach","dataRows","flatMap","contactName","salesOrderNumber","invoiceStatus","amount","worksheet","json_to_sheet","book_append_sheet","writeFile","HeaderContent","Plus","DownloadSimple","getAllContacts","res","fetchAllContacts","_res$data","contactForSelect","contact","displayName","getAllItems","fetchAllItems","_res$data2","itemsMap","itemsForSelect","has","set","fetchSalesOrder","startOf","endOf","updateDate","days","updatedDate","ItemTable","itemData","fetchAllAgents","_res$data3","AgentsForSelect","agent","getAllAgents","ai","minH","maxW","CommonHeader","CaretCircleLeft","RangePicker","onDateChange","dates","dateFunc","popupClassName","CaretCircleRight","minWidth","clearFilter","expandable","expandIcon","expandIconColumnIndex","expandRowByClick","expandedRowRender","_record$containers","Descriptions","column","agentName","curr","rowKey","AddSalesOrder","EditSalesOrder"],"sourceRoot":""}