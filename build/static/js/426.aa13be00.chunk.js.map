{"version":3,"file":"static/js/426.aa13be00.chunk.js","mappings":"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","sources":["Components/CommonHeader/index.jsx","Components/TableColumns/index.jsx","Components/AddSalesOrderModal/index.jsx","api/sales/index.js","Styled/Button/index.jsx","Components/EditSalesOrderModal/CommonContext.jsx","Components/EditSalesOrderModal/EditableCell.jsx","Components/EditSalesOrderModal/EditableRow.jsx","Components/EditSalesOrderModal/index.jsx","Utils/excel.jsx","Pages/SaleOrder/index.jsx"],"sourcesContent":["import { CaretLeft } from \"@phosphor-icons/react\";\nimport { RowFlex, StyledText } from \"../../Styled/Layout\";\n\nconst CommonHeader = (props) => {\n  const {title, onBack, rightContent} = props;\n  return (\n    <RowFlex\n          w=\"100%\"\n          h=\"56px\"\n          m=\"0\"\n          p=\"10px 20px\"\n          bg=\"#6a8099\"\n    >\n      <RowFlex m=\"auto 0\" gap=\"10px\">\n        <CaretLeft size={24} color=\"#fff\" onClick={onBack} />\n        <StyledText fs=\"18px\" lh=\"24px\" fw=\"600\" ff=\"Inter\" c=\"#fff\" mb=\"auto\">\n            {title}\n        </StyledText>\n      </RowFlex>\n      {rightContent}\n    </RowFlex>\n  );\n};\n\nexport default CommonHeader;\n","export const statusDesign = {\n  \"PENDING\": \"orange\",\n  \"PACKED\": \"purple\",\n  \"SENT\": \"blue\",\n  \"DONE\": \"green\",\n  \"CANCELLED\": \"red\",\n}\n","import { useState } from \"react\";\nimport { Button, DatePicker, Form, Input, message, Modal, Radio, Select, Space } from \"antd\";\nimport { MinusCircle, PlusCircle } from \"@phosphor-icons/react\";\nimport dayjs from 'dayjs';\nimport { addSaleOrder } from \"../../api/sales\";\nimport { addCommas, ContainerTypes, handleCatch, ItemUnits } from \"../../common-utils\";\nimport { StyledDiv } from \"../../Styled/Layout\";\nconst dateTimestamp = dayjs().valueOf();\n\nconst AddSalesOrder = (props) => {\n    const { open, onClose, allContacts, allItems, allAgents, fetchOrders } = props;\n    const [loading, setLoading] = useState(false);\n    const [totalAmount, setTotalAmount] = useState(0);\n    const [form] = Form.useForm();\n\n    const onFinish = async (values) => {\n        setLoading(true);\n        const payload = {\n            saleOrder: {\n                contactId: values.contactId,\n                agentId: values.agentId,\n                saleType: values.saleType,\n            },\n            lineItems: values.lineItems?.map((item) => {\n                return {\n                    itemId: item.itemId,\n                    type: 'SALE_ORDER',\n                    quantity: item.quantity,\n                    unit: item.unit,\n                    rate: item.rate,\n                    itemTotal: item.quantity * item.rate,\n                }\n            }),\n            containers: values.containers\n        }\n        try {\n            await addSaleOrder(payload);\n            message.success('sale order added successfully');\n            fetchOrders();\n            onClose();\n        } catch (err) {\n            handleCatch(err);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleItemTotal = () => {\n        const lineItems = form.getFieldValue('lineItems');\n        let total = 0;\n        for (const item of lineItems) {\n            const { quantity, rate } = item;\n            total += rate && quantity ? rate * quantity : 0;\n        }\n        setTotalAmount(total);\n    }\n\n    return (\n        <Modal\n            title=\"Add Sales\"\n            footer={null}\n            loading={loading}\n            open={open}\n            onCancel={onClose}\n            styles={{ content: { padding: '10px' } }}\n            style={{top: '50px'}}\n        >\n            <StyledDiv pos=\"absolute\" top=\"10px\" right=\"50px\" c=\"#00000088\" style={{fontWeight: '600', fontSize: '16px'}}>Total : ₹ {addCommas(totalAmount)}</StyledDiv>\n            <Form\n                form={form}\n                labelCol={{ xs: { span: 10 }, sm: { span: 8 } }}\n                wrapperCol={{ xs: { span: 14 }, sm: { span: 16 } }}\n                initialValues={{\n                    saleType: 'local',\n                    date: dateTimestamp\n                }}\n                layout=\"horizontal\"\n                size=\"middle\"\n                style={{\n                    maxWidth: 600,\n                    margin: '20px 0 10px'\n                }}\n                onFinish={onFinish}\n            >\n                <Form.Item\n                    name=\"date\"\n                    wrapperCol={{ span: 24 }}\n                    style={{ textAlign: 'right' }}\n                    rules={[\n                        {\n                            required: true,\n                        },\n                    ]}\n                    getValueProps={(value) => ({\n                        value: value && dayjs(Number(value)),\n                    })}\n                    normalize={(value) => value && `${dayjs(value).valueOf()}`}\n                >\n                    <DatePicker />\n                </Form.Item>\n                <Form.Item name=\"contactId\" wrapperCol={{ span: 24 }} rules={[{ required: true, message: 'Please select a customer!' }]}>\n                    <Select\n                        showSearch\n                        placeholder=\"Select Customer\"\n                        optionFilterProp=\"label\"\n                        filterSort={(optionA, optionB) =>\n                            (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                        }\n                        options={allContacts}\n                    />\n                </Form.Item>\n                <Form.Item\n                    name=\"saleType\"\n                    label=\"sale type\"\n                    rules={[\n                        {\n                            required: true,\n                            message: 'Please pick an item!',\n                        },\n                    ]}>\n                    <Radio.Group>\n                        <Radio.Button value=\"local\">Local</Radio.Button>\n                        <Radio.Button value=\"interState\">InterState</Radio.Button>\n                    </Radio.Group>\n                </Form.Item>\n                <Form.Item\n                    noStyle\n                    shouldUpdate={(prevValues, currentValues) => prevValues.saleType !== currentValues.saleType}\n                >\n                    {({ getFieldValue }) =>\n                        getFieldValue('saleType') === 'interState' ? (\n                            <Form.Item name=\"agentId\" label=\"Agent\">\n                                <Select\n                                    showSearch\n                                    placeholder=\"Select Agent\"\n                                    optionFilterProp=\"label\"\n                                    popupMatchSelectWidth={false}\n                                    filterSort={(optionA, optionB) =>\n                                        (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                                    }\n                                    options={allAgents}\n                                />\n                            </Form.Item>\n                        ) : null}\n                </Form.Item>\n                <Form.List\n                    name=\"lineItems\"\n                    rules={[\n                        {\n                            validator: async (_, names) => {\n                                if (!names || names.length < 1) {\n                                    return Promise.reject(new Error('At least 1 Item'));\n                                }\n                            },\n                        },\n                    ]}\n                >\n                    {(fields, { add, remove }, { errors }) => (\n                        <>\n                            {fields.map(({ key, name, ...restField }) => (\n                                <Space\n                                    key={key}\n                                    style={{\n                                        display: 'flex'\n                                    }}\n                                    align=\"baseline\"\n                                >\n                                    <Form.Item\n                                        {...restField}\n                                        name={[name, 'itemId']}\n                                        wrapperCol={{ span: 24 }}\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Missing item',\n                                            },\n                                        ]}\n                                    >\n                                        <Select\n                                            showSearch\n                                            placeholder=\"items\"\n                                            optionFilterProp=\"label\"\n                                            popupMatchSelectWidth={false}\n                                            filterSort={(optionA, optionB) =>\n                                                (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                                            }\n                                            options={allItems}\n                                            style={{ width: '100%' }}\n                                        >\n                                        </Select>\n                                    </Form.Item>\n                                    <Form.Item\n                                        {...restField}\n                                        name={[name, 'quantity']}\n                                        wrapperCol={{ span: 24 }}\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Missing quantity',\n                                            },\n                                        ]}\n                                    >\n                                        <Input placeholder=\"Qtn\" type=\"number\" style={{ marginBottom: 0 }} onChange={handleItemTotal} />\n                                    </Form.Item>\n                                    <Form.Item\n                                        {...restField}\n                                        name={[name, 'unit']}\n                                        wrapperCol={{ span: 24 }}\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Missing unit',\n                                            },\n                                        ]}\n                                        initialValue={'kg'}\n                                    >\n                                        <Select\n                                            placeholder=\"units\"\n                                            style={{ width: '100%' }}\n                                        >\n                                            {ItemUnits.map(unit => (\n                                                <Select.Option key={unit} value={unit}>{unit}</Select.Option>\n                                            ))}\n                                        </Select>\n                                    </Form.Item>\n                                    <Form.Item\n                                        {...restField}\n                                        name={[name, 'rate']}\n                                        wrapperCol={{ span: 24 }}\n                                    >\n                                        <Input placeholder=\"Rate\" prefix=\"₹\" type=\"number\" style={{ marginBottom: 0 }} onChange={handleItemTotal} />\n                                    </Form.Item>\n                                    <MinusCircle size={24} color=\"#000\" style={{ marginBottom: \"-7px\" }} onClick={() => {\n                                        remove(name);\n                                        handleItemTotal()\n                                    }} />\n                                </Space>\n                            ))}\n                            <Form.Item\n                                wrapperCol={{ span: 24 }}\n                            >\n                                <Button type=\"dashed\" onClick={() => add()} block icon={<PlusCircle size={24} color=\"#000\" />}>\n                                    Add Item\n                                </Button>\n                                <Form.ErrorList errors={errors} />\n                            </Form.Item>\n                        </>\n                    )}\n                </Form.List>\n                <Form.List\n                    name=\"containers\"\n                >\n                    {(fields, { add, remove }, { errors }) => (\n                        <>\n                            {fields.map(({ key, name, ...restField }) => (\n                                <Space\n                                    key={key}\n                                    style={{\n                                        display: 'flex'\n                                    }}\n                                    align=\"baseline\"\n                                >\n                                    <Form.Item\n                                        {...restField}\n                                        name={[name, 'type']}\n                                        wrapperCol={{ span: 24 }}\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Missing type',\n                                            },\n                                        ]}\n                                    >\n                                        <Select\n                                            placeholder=\"type\"\n                                            style={{ width: '100%' }}\n                                            popupMatchSelectWidth={false}\n                                        >\n                                            {ContainerTypes.map(type => (\n                                                <Select.Option key={type} value={type}>{type}</Select.Option>\n                                            ))}\n                                        </Select>\n                                    </Form.Item>\n                                    <Form.Item\n                                        {...restField}\n                                        name={[name, 'quantity']}\n                                        wrapperCol={{ span: 24 }}\n                                        rules={[\n                                            {\n                                                required: true,\n                                                message: 'Missing quantity',\n                                            },\n                                        ]}\n                                    >\n                                        <Input placeholder=\"Qtn\" type=\"number\" style={{ marginBottom: 0 }} />\n                                    </Form.Item>\n                                    <MinusCircle size={24} color=\"#000\" style={{ marginBottom: \"-7px\" }} onClick={() => remove(name)} />\n                                </Space>\n                            ))}\n                            <Form.Item\n                                wrapperCol={{ span: 24 }}\n                            >\n                                <Button type=\"dashed\" onClick={() => add()} block icon={<PlusCircle size={24} color=\"#000\" />}>\n                                    Add Containers\n                                </Button>\n                                <Form.ErrorList errors={errors} />\n                            </Form.Item>\n                        </>\n                    )}\n                </Form.List>\n                <div\n                    style={{\n                        textAlign: 'right',\n                    }}\n                >\n                    <Button type=\"primary\" htmlType=\"submit\">\n                        Submit\n                    </Button>\n                </div>\n\n            </Form>\n        </Modal>\n    );\n};\n\nexport default AddSalesOrder;\n","import { API_URL, request } from \"../../common-utils\";\n\nexport const fetchSalesOrder = (payload) => {\n    const url = `${API_URL}/saleOrder/list-all`;\n\n    return request({\n        url: url,\n        method: \"post\",\n        data: payload,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n\nexport const fetchAllContacts = () => {\n    const url = `${API_URL}/contact/list-all`;\n\n    return request({\n        url: url,\n        method: \"get\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n\nexport const fetchAllItems = () => {\n    const url = `${API_URL}/item/list-all`;\n\n    return request({\n        url: url,\n        method: \"get\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n\nexport const addSaleOrder = (payload) => {\n    const url = `${API_URL}/saleOrder/add-sale-order`;\n\n    return request({\n        url: url,\n        method: \"post\",\n        data: payload,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n\nexport const updateSaleOrder = (id, payload) => {\n    const url = `${API_URL}/saleOrder/update-sale-order/${id}`;\n\n    return request({\n        url: url,\n        method: \"post\",\n        data: payload,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n\nexport const updateSalesOrderStatus = (id, payload) => {\n    const url = `${API_URL}/saleOrder/update-sale-order-status/${id}`;\n\n    return request({\n        url: url,\n        method: \"post\",\n        data: payload,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    });\n}\n","import { Button } from \"antd\";\nimport styled from \"styled-components\";;\n\nexport const StyledPillButton = styled(Button)`\n  background: ${(props) =>\n    props.isActive ? props.activeBgc || \"\" : props.bgc || \"\"} !important;\n  width: ${(props) => (props.isActive ? props.activeW || \"\" : props.w || \"\")};\n  display: ${(props) => props.d || \"\"};\n  height: ${(props) => props.h || \"\"};\n  font-size: ${(props) => props.fs || \"16px\"};\n  font-weight: ${(props) => props.fw || \"500\"};\n  font-family: ${(props) => props.ff};\n  margin: ${(props) => props.m || \"\"};\n  margin-right: ${(props) => props.mr || \"\"};\n  padding: ${(props) => props.p || \"\"};\n  border: ${(props) =>\n    props.b || \"1px solid rgba(217, 217, 217, 1)\"} !important;\n  border-radius: ${(props) => props.br || \"45px\"};\n  color: ${(props) =>\n    props.isActive\n      ? props.activeC || \"rgba(255, 255, 255, 1)\"\n      : props.c || \"rgba(48, 48, 48, 1)\"} !important;\n  margin-bottom: ${(props) => props.mb || \"\"};\n  margin-top: ${(props) => props.mt || \"\"};\n  ${(props) => props.bottom && `bottom: ${props.bottom};`}\n  &:focus {\n    background: ${(props) => props.focusbgc || \"\"} !important;\n    border: ${(props) => props.b || \"\"} !important;\n  }\n  &:disabled {\n    background: grey !important;\n    color: #ccc !important;\n    cursor: not-allowed !important;\n    border: none !important;\n  }\n`;\nexport const StyledButton = styled(Button)`\n  background: ${(props) => props.bgc || \"#FFF\"} !important;\n  width: ${(props) => props.w || \"\"};\n  display: ${(props) => props.d || \"\"};\n  height: ${(props) => props.h || \"46px\"};\n  font-size: ${(props) => props.fs || \"16px\"};\n  font-weight: ${(props) => props.fw || \"500\"};\n  font-family: ${(props) => props.ff};\n  margin: ${(props) => props.m || \"\"};\n  margin-right: ${(props) => props.mr || \"\"};\n  padding: ${(props) => props.p || \"\"};\n  border: ${(props) => props.b || \"\"} !important;\n  border-radius: ${(props) => props.br || \"10px\"};\n  color: ${(props) => props.c || \"#3465FF\"} !important;\n  margin-bottom: ${(props) => props.mb || \"\"};\n  margin-top: ${(props) => props.mt || \"\"};\n  ${(props) => props.bottom && `bottom: ${props.bottom};`}\n\n  &:hover {\n    background: ${(props) =>\n      props.hoverbgc ? props.hoverbgc : props.bgc || \"\"} !important;\n    border: ${(props) => props.b || \"0px\"} !important;\n    color: ${(props) => props.c || \"#3465FF\"} !important;\n  }\n  &:focus {\n    background: ${(props) => props.focusbgc || \"\"} !important;\n    border: ${(props) => props.b || \"\"} !important;\n    color: ${(props) => props.c || \"#3465FF\"} !important;\n  }\n  &:disabled {\n    background: grey !important;\n    color: #ccc !important;\n    cursor: not-allowed !important;\n    border: none !important;\n  }\n`;\n","import React from \"react\";\n\nconst EditableContext = React.createContext(null);\nexport default EditableContext;","import { useContext, useEffect, useRef, useState } from \"react\";\nimport { Form, Input, Select } from \"antd\";\nimport EditableContext from \"./CommonContext\";\nimport { ContainerTypes, ItemUnits } from \"../../common-utils\";\n\nexport const ItemTableEditableCell = ({\n    title,\n    editable,\n    children,\n    dataIndex,\n    record,\n    allItems,\n    itemNameToIdMap,\n    handleSave,\n    ...restProps\n}) => {\n    const [editing, setEditing] = useState(false);\n    const inputRef = useRef(null);\n    const form = useContext(EditableContext);\n    useEffect(() => {\n        if (editing) {\n            inputRef.current?.focus();\n        }\n    }, [editing]);\n    const toggleEdit = () => {\n        setEditing(!editing);\n        form.setFieldsValue({\n            [dataIndex]: record[dataIndex],\n        });\n    };\n    const save = async () => {\n        try {\n            const values = await form.validateFields();\n            toggleEdit();\n            switch(dataIndex) {\n                case \"itemId\":\n                    values.itemDetails = {\n                        ...values.itemDetails,\n                        name: itemNameToIdMap.get(values.itemId)\n                    }\n                    break;\n                case \"quantity\":\n                case \"rate\":\n                    const { rate, quantity } = values;\n                    values.itemTotal = ((rate || record.rate) * (quantity || record.quantity)) || 0;\n                    break;\n                default:\n            }\n            handleSave({\n                ...record,\n                ...values,\n            });\n        } catch (errInfo) {\n            console.log('Save failed:', errInfo);\n        }\n    };\n\n    const formField = () => {\n        switch(dataIndex) {\n            case \"itemId\":\n                return <Select\n                        showSearch\n                        ref={inputRef}\n                        optionFilterProp=\"label\"\n                        popupMatchSelectWidth={false}\n                        filterSort={(optionA, optionB) =>\n                            (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                        }\n                        options={allItems}\n                        onChange={save}\n                        onBlur={save}\n                    >\n                    </Select>\n            case \"unit\":\n                return <Select \n                        placeholder=\"units\"\n                        style={{width: '100%'}}\n                        onChange={save}\n                        onBlur={save}\n                    >\n                        {ItemUnits.map(unit => (\n                            <Select.Option key={unit} value={unit}>{unit}</Select.Option>\n                        ))}\n                    </Select>\n            case \"rate\":\n            case \"quantity\":\n                return <Input ref={inputRef} onPressEnter={save} onBlur={save} type=\"number\" />;\n            default:\n                return <Input ref={inputRef} onPressEnter={save} onBlur={save} />;\n        }\n    }\n    let childNode = children;\n    if (editable) {\n        childNode = editing ? (\n            <Form.Item\n                style={{ margin: 0 }}\n                name={dataIndex}\n                rules={[{ required: true, message: `${title} is required.` }]}\n            >\n                { formField() }\n            </Form.Item>\n        ) : (\n            <div\n                className=\"editable-cell-value-wrap\"\n                style={{\n                    paddingInlineEnd: 24,\n                }}\n                onClick={toggleEdit}\n            >\n                {children}\n            </div>\n        );\n    }\n    return <td {...restProps}>{childNode}</td>;\n};\n\nexport const ContainerTableEditableCell = ({\n    title,\n    editable,\n    children,\n    dataIndex,\n    record,\n    allAgents,\n    itemNameToIdMap,\n    handleSave,\n    ...restProps\n}) => {\n    const [editing, setEditing] = useState(false);\n    const inputRef = useRef(null);\n    const form = useContext(EditableContext);\n    useEffect(() => {\n        if (editing) {\n            inputRef.current?.focus();\n        }\n    }, [editing]);\n    const toggleEdit = () => {\n        setEditing(!editing);\n        form.setFieldsValue({\n            [dataIndex]: record[dataIndex],\n        });\n    };\n    const save = async () => {\n        try {\n            const values = await form.validateFields();\n            toggleEdit();\n            handleSave({\n                ...record,\n                ...values,\n            });\n        } catch (errInfo) {\n            console.log('Save failed:', errInfo);\n        }\n    };\n\n    const formField = () => {\n        switch(dataIndex) {\n            case \"type\":\n                return <Select\n                        showSearch\n                        ref={inputRef}\n                        optionFilterProp=\"label\"\n                        popupMatchSelectWidth={false}\n                        filterSort={(optionA, optionB) =>\n                            (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                        }\n                        options={ContainerTypes.map(type => ({label: type, value: type}))}\n                        onChange={save}\n                        onBlur={save}\n                    >\n                    </Select>\n            case \"quantity\":\n                return <Input ref={inputRef} onPressEnter={save} onBlur={save} type=\"number\" />;\n            default:\n                return <Input ref={inputRef} onPressEnter={save} onBlur={save} />;\n        }\n    }\n    let childNode = children;\n    if (editable) {\n        childNode = editing ? (\n            <Form.Item\n                style={{ margin: 0 }}\n                name={dataIndex}\n                rules={[{ required: true, message: `${title} is required.` }]}\n            >\n                { formField() }\n            </Form.Item>\n        ) : (\n            <div\n                className=\"editable-cell-value-wrap\"\n                style={{\n                    paddingInlineEnd: 24,\n                }}\n                onClick={toggleEdit}\n            >\n                {children}\n            </div>\n        );\n    }\n    return <td {...restProps}>{childNode}</td>;\n};","import { Form } from \"antd\";\nimport EditableContext from \"./CommonContext\";\n\nexport const ItemTableEditableRow = ({ index, ...props }) => {\n    const [form] = Form.useForm();\n    return (\n        <Form form={form} component={false}>\n            <EditableContext.Provider value={form}>\n                <tr {...props} />\n            </EditableContext.Provider>\n        </Form>\n    );\n};\n\nexport const ContainerTableEditableRow = ({ index, ...props }) => {\n    const [form] = Form.useForm();\n    return (\n        <Form form={form} component={false}>\n            <EditableContext.Provider value={form}>\n                <tr {...props} />\n            </EditableContext.Provider>\n        </Form>\n    );\n};\n","import { useEffect, useState } from \"react\";\nimport { Button, DatePicker, message, Modal, Radio, Select, Table } from \"antd\";\nimport { MinusCircle, PlusCircle } from \"@phosphor-icons/react\";\nimport dayjs from 'dayjs';\nimport { updateSaleOrder } from \"../../api/sales\";\nimport { handleCatch, handleTableChange } from \"../../common-utils\";\nimport { ColFlex, RowFlex, StyledText } from \"../../Styled/Layout\";\nimport { ContainerTableEditableCell, ItemTableEditableCell } from \"./EditableCell\";\nimport { ContainerTableEditableRow, ItemTableEditableRow } from \"./EditableRow\";\nimport { StyledPillButton } from \"../../Styled/Button\";\n\nconst EditSalesOrder = (props) => {\n    const { open, onClose, saleOrder, allContacts, allItems, allAgents, itemNameToIdMap } = props;\n    const [contactId, setContactId] = useState(null);\n    const [agentId, setAgentId] = useState(null);\n    const [lineItems, setLineItems] = useState([]);\n    const [container, setContainers] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [date, setDate] = useState(null);\n    const [saleType, setSaleType] = useState();\n    const pageSize = 10;\n\n    const onFinish = async () => {\n        if (!saleOrder) {\n            message.error('Sale order not found');\n            return;\n        }\n        setLoading(true);\n        const saleOrderData = {};\n        if (contactId?.value && contactId.value != saleOrder.contactId) {\n            saleOrderData.contactId = contactId.value;\n        }\n        if (saleType != saleOrder.saleType) {\n            saleOrderData.saleType = saleType;\n        }\n        if(saleType == \"interState\" && agentId?.value && agentId.value != saleOrder.agentId) {\n            saleOrderData.agentId = agentId.value;\n        } else if(saleType == \"local\" && saleOrder.agentId != null) {\n            saleOrderData.agentId = null;\n        }\n        if (!dayjs(saleOrder.date).isSame(date, 'day')) {\n            saleOrderData.date = date.valueOf();\n        }\n        try {\n            await updateSaleOrder(saleOrder.id, {\n                saleOrder: saleOrderData,\n                lineItems,\n                containers: container\n            });\n            message.success('sale order updated successfully');\n        } catch (err) {\n            handleCatch(err);\n            onClose();\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleAdd = () => {\n        const newData = {\n            \"id\": lineItems.length,\n            \"itemId\": 1,\n            \"itemTotal\": 0,\n            \"quantity\": 0,\n            \"rate\": 0,\n            \"unit\": \"kg\",\n            \"itemDetails\": {\n                \"name\": \"broccoli\"\n            }\n        };\n        const updatedLineItems = [...lineItems, newData];\n        setLineItems(updatedLineItems);\n\n        if (Math.ceil(updatedLineItems.length / pageSize) > 1) {\n            setCurrentPage(Math.ceil(updatedLineItems.length / pageSize));\n        }\n    };\n\n    const handleDelete = (id) => {\n        if (lineItems.length <= 1) {\n            message.error('At least one item should be present');\n            return;\n        }\n        const newData = lineItems.filter((item) => item.id !== id);\n        setLineItems(newData);\n    };\n\n    const handleSave = (row) => {\n        const newData = [...lineItems];\n        const index = newData.findIndex((item) => row.id === item.id);\n        const item = newData[index];\n        newData.splice(index, 1, {\n            ...item,\n            ...row,\n        });\n        setLineItems(newData);\n    };\n\n    const handleContainerAdd = () => {\n        const newData = {\n            \"id\": container.length,\n            \"type\": \"whiteBox\",\n            \"quantity\": 1\n        };\n        const updatedContainers = [...container, newData];\n        setContainers(updatedContainers);\n    };\n\n    const handleContainerDelete = (id) => {\n        const newData = container.filter((item) => item.id !== id);\n        setContainers(newData);\n    };\n\n    const handleContainerSave = (row) => {\n        const newData = [...container];\n        const index = newData.findIndex((item) => row.id === item.id);\n        const item = newData[index];\n        newData.splice(index, 1, {\n            ...item,\n            ...row,\n        });\n        setContainers(newData);\n    };\n\n    const itemsTableColumn = [\n        {\n            title: 'Item Name',\n            dataIndex: 'itemId',\n            render: (data) => <>{itemNameToIdMap.get(data)}</>\n        },\n        {\n            title: 'rate',\n            dataIndex: 'rate',\n        },\n        {\n            title: 'Qtn',\n            dataIndex: 'quantity',\n        },\n        {\n            title: 'unit',\n            dataIndex: 'unit',\n        }\n    ];\n    const containerTableColumn = [\n        {\n            title: 'type',\n            dataIndex: 'type',\n            editable: true,\n            onCell: (record) => ({\n                record,\n                editable: true,\n                dataIndex: 'type',\n                title: 'type',\n                handleSave: handleContainerSave\n            }),\n        },\n        {\n            title: 'Qtn',\n            dataIndex: 'quantity',\n            editable: true,\n            onCell: (record) => ({\n                record,\n                editable: true,\n                dataIndex: 'quantity',\n                title: 'Qtn',\n                handleSave: handleContainerSave\n            }),\n        },\n        {\n            width: 1,\n            render: (_, record, i) =>\n                lineItems.length >= 1 ? (\n                    <MinusCircle size={24} color=\"rgb(140,140,140)\" onClick={() => handleContainerDelete(record.id)} />\n                ) : null,\n        }\n    ];\n\n    const columns = [...(itemsTableColumn.map((col) => {\n        return {\n            ...col,\n            editable: true,\n            onCell: (record) => ({\n                record,\n                editable: true,\n                dataIndex: col.dataIndex,\n                title: col.title,\n                allItems,\n                itemNameToIdMap,\n                handleSave,\n            }),\n        };\n    })),\n    {\n        width: 1,\n        render: (_, record) =>\n            lineItems.length >= 1 ? (\n                <MinusCircle size={24} color=\"rgb(140,140,140)\" onClick={() => handleDelete(record.id)} />\n            ) : null,\n    }\n    ];\n\n    useEffect(() => {\n        const { date, items, saleType, contactId, agentId, containers } = saleOrder || {};\n        setLineItems(items || []);\n        setContainers(containers || []);\n        setDate(dayjs(date));\n        setSaleType(saleType);\n        setContactId(contactId);\n        setAgentId(agentId)\n    }, [saleOrder]);\n\n    return (\n        <Modal\n            title=\"Edit Sale\"\n            footer={null}\n            loading={loading}\n            open={open}\n            onCancel={onClose}\n            styles={{ content: { padding: '10px' } }}\n            style={{ maxWidth: \"fit-content\", top: '50px' }}\n            width=\"fit-content\"\n        >\n            <ColFlex gap=\"15px\">\n                <DatePicker value={date} style={{ alignSelf: \"end\", marginTop: \"10px\" }} onChange={(e, v) => setDate(dayjs(v))} />\n                <Select\n                    showSearch\n                    value={contactId}\n                    placeholder=\"Select Customers\"\n                    optionFilterProp=\"label\"\n                    filterSort={(optionA, optionB) =>\n                        (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                    }\n                    options={allContacts}\n                    style={{ width: '100%' }}\n                    onChange={(e, v) => setContactId(v)}\n                />\n                <RowFlex m=\"0\">\n                    <StyledText m=\"auto 20px auto 0\" fs=\"14px\" ff=\"Inter\">Sale Type : </StyledText>\n                    <Radio.Group\n                        options={[\n                            { label: \"Local\", value: \"local\" },\n                            { label: \"InterState\", value: \"interState\" }\n                        ]}\n                        value={saleType}\n                        optionType=\"button\"\n                        onChange={(e) => setSaleType(e.target.value)}\n                    />\n                </RowFlex>\n                {saleType == \"interState\" &&\n                    <RowFlex m=\"0\">\n                        <StyledText m=\"auto 20px auto 0\" fs=\"14px\" ff=\"Inter\">Agent : </StyledText>\n                        <Select\n                            showSearch\n                            value={agentId}\n                            placeholder=\"Select Agent\"\n                            optionFilterProp=\"label\"\n                            popupMatchSelectWidth={false}\n                            filterSort={(optionA, optionB) =>\n                                (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n                            }\n                            options={allAgents}\n                            onChange={(e, v) => setAgentId(v)}\n                        />\n                    </RowFlex>}\n                <Table\n                    bordered\n                    size=\"middle\"\n                    columns={columns}\n                    dataSource={lineItems}\n                    rowClassName={() => 'editable-row'}\n                    pagination={{\n                        position: [\"none\", \"bottomCenter\"],\n                        pageSize,\n                        onChange: (p) => handleTableChange(p, setCurrentPage),\n                        current: currentPage\n                    }}\n                    components={{\n                        body: {\n                            row: ItemTableEditableRow,\n                            cell: ItemTableEditableCell,\n                        }\n                    }}\n                    footer={() => <Button type=\"dashed\" onClick={handleAdd} block icon={<PlusCircle size={24} color=\"rgb(140,140,140)\" />}>\n                        Add Item\n                    </Button>\n                    }\n                    style={{ width: '100%', marginLeft: 0 }}\n                />\n                <Table\n                    bordered\n                    size=\"middle\"\n                    columns={containerTableColumn}\n                    dataSource={container}\n                    rowClassName={() => 'editable-row'}\n                    pagination={false}\n                    components={{\n                        body: {\n                            row: ContainerTableEditableRow,\n                            cell: ContainerTableEditableCell,\n                        }\n                    }}\n                    footer={() => <Button type=\"dashed\" onClick={handleContainerAdd} block icon={<PlusCircle size={24} color=\"rgb(140,140,140)\" />}>\n                        Add Container\n                    </Button>\n                    }\n                    style={{ width: '100%', marginLeft: 0 }}\n                />\n                <StyledPillButton c=\"#fff\" w=\"80px\" h=\"42px\" type=\"primary\" onClick={onFinish} style={{ alignSelf: \"center\" }}>\n                    Save\n                </StyledPillButton>\n            </ColFlex>\n        </Modal>\n    );\n};\n\nexport default EditSalesOrder;\n","import dayjs from 'dayjs';\nconst XLSX = require(\"xlsx\");\n// import XLSX from 'xlsx';\n\nexport const downloadExcel = (salesData, startDate, endDate) => {\n    // Helper to format date\n    const formatDate = (dateString) => dayjs(dateString).format(\"YYYY-MMM-DD\");\n\n    // Group sales data by date\n    const salesByDate = salesData.reduce((acc, order) => {\n        const date = formatDate(order.date);\n        if (!acc[date]) acc[date] = [];\n        acc[date].push(order);\n        return acc;\n    }, {});\n\n    // Create a new workbook\n    const workbook = XLSX.utils.book_new();\n\n    Object.keys(salesByDate).forEach(date => {\n        // Prepare data rows for each date\n        const dataRows = salesByDate[date].flatMap(order =>\n            order.items.map((item, index) => ({\n                \"Contact Name\": index === 0 ? order.contactName : \"\",\n                \"Sales Order Number\": index === 0 ? order.salesOrderNumber : \"\",\n                \"Sale Type\": index === 0 ? order.saleType : \"\",\n                \"Status\": index === 0 ? order.status : \"\",\n                \"Invoice Status\": index === 0 ? order.invoiceStatus : \"\",\n                \"Date\": index === 0 ? formatDate(order.date) : \"\",\n                \"Amount\": index === 0 ? order.amount : \"\",\n                \"Item Name\": item.itemDetails.name,\n                \"Rate\": item.rate,\n                \"Quantity\": item.quantity,\n                \"Unit\": item.unit,\n                \"Item Total\": item.itemTotal\n            }))\n        );\n\n        // Create a worksheet for each date\n        const worksheet = XLSX.utils.json_to_sheet(dataRows);\n        XLSX.utils.book_append_sheet(workbook, worksheet, date);\n    });\n\n    // Write workbook to file\n    XLSX.writeFile(workbook, `${startDate}-${endDate}_sales.xlsx`);\n\n    console.log(\"Excel file has been created successfully.\");\n}\n","import { useEffect, useState } from \"react\";\nimport { DatePicker, Descriptions, message, Select, Table } from \"antd\";\nimport { addCommas, checkAccess, handleCatch, screenHeight } from \"../../common-utils\";\nimport CommonHeader from \"../../Components/CommonHeader\";\nimport { ColFlex, RowFlex, StyledDiv, StyledText } from \"../../Styled/Layout\";\nimport { statusDesign } from \"../../Components/TableColumns\";\nimport { fetchAllContacts, fetchAllItems, fetchSalesOrder, updateSalesOrderStatus } from \"../../api/sales\";\nimport AddSalesOrder from \"../../Components/AddSalesOrderModal\";\nimport { StyledButton } from \"../../Styled/Button\";\nimport { CaretCircleLeft, CaretCircleRight, DownloadSimple, Plus } from \"@phosphor-icons/react\";\nimport EditSalesOrder from \"../../Components/EditSalesOrderModal\";\nimport { PencilSimple } from \"@phosphor-icons/react\";\nimport { Tag } from \"antd\";\nimport dayjs from 'dayjs';\nimport { downloadExcel } from \"../../Utils/excel\";\nimport { fetchAllAgents } from \"../../api\";\nimport { useNavigate } from \"react-router-dom\";\n\nconst SaleOrderStatus = [\n  {value: 'PENDING', label: <StyledText ta=\"left\" fs=\"14px\" fw=\"600\" c={statusDesign['PENDING']}>Pending</StyledText>},\n  {value: 'PACKED', label: <StyledText ta=\"left\" fs=\"14px\" fw=\"600\" c={statusDesign['PACKED']}>Packed</StyledText>},\n  {value: 'SENT', label: <StyledText ta=\"left\" fs=\"14px\" fw=\"600\" c={statusDesign['SENT']}>Sent</StyledText>},\n  {value: 'DONE', label: <StyledText ta=\"left\" fs=\"14px\" fw=\"600\" c={statusDesign['DONE']}>Done</StyledText>},\n  {value: 'CANCELLED', label: <StyledText ta=\"left\" fs=\"14px\" fw=\"600\" c={statusDesign['CANCELLED']}>Cancelled</StyledText>}\n];\n\nconst SaleOrder = () => {\n  const navigate = useNavigate();\n  const [saleOrderData, setSaleOrderData] = useState([]);\n  const [filteredSaleOrders, setFilteredSaleOrders] = useState([]);\n  const [addSaleModalOpen, setAddSaleModalOpen] = useState(false);\n  const [editSaleModalOpen, setEditSaleModalOpen] = useState(false);\n  const [selectedSaleOrder, setSelectedSaleOrder] = useState(null);\n  const [allContacts, setAllContacts] = useState([]);\n  const [itemNameToIdMap, setItemNameToIdMap] = useState(new Map());\n  const [allItems, setAllItems] = useState([]);\n  const [allAgents, setAllAgents] = useState([]);\n  const [date, setDate] = useState([dayjs(), dayjs()]);\n  const [isdateChangeBtnVisible, setIsdateChangeBtnVisible] = useState(true);\n\n  //filters\n  const [selectedContact, setSelectedContact] = useState(null);\n  const [selectedStatus, setSelectedStatus] = useState(null);\n\n  const handleStatusChange = async (id, status, newStatus) => {\n    try {\n      // Optimistically update the table\n      const updatedData = filteredSaleOrders.map((item) => \n        item.id === id ? { ...item, status: newStatus } : item\n      );\n      setFilteredSaleOrders(updatedData);\n  \n      // Send the update to the backend\n      const response = await updateSalesOrderStatus(id, { status: newStatus });\n    } catch (error) {\n      handleCatch(error);\n  \n      // Revert the optimistic update if the API call fails\n      const originalData = filteredSaleOrders.map((item) =>\n        item.id === id ? { ...item, status: status } : item\n      );\n      setFilteredSaleOrders(originalData);\n    }\n  };\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'contactName',\n      filteredValue: selectedContact && [selectedContact],\n      onFilter: (value, record) => record.contactId == value\n    }\n  ];\n\n  if (checkAccess('EDIT_SALE_ORDER')) {\n    columns.push({\n      title: 'Status',\n      dataIndex: 'status',\n      filteredValue: selectedStatus && [selectedStatus],\n      onFilter: (value, record) => record.status == value,\n      render: (data, record) => <Select\n          value={data}\n          options={SaleOrderStatus}\n          style={{ width: 'fit-content'}}\n          popupMatchSelectWidth={false}\n          onClick={(e) => e.stopPropagation()}\n          onChange={(newStatus) => handleStatusChange(record.id, data, newStatus)}\n      />\n    },{\n      key: 'action',\n      render: (_, rowData) => <PencilSimple size={18} color=\"rgba(0, 0, 0, 0.58)\" weight=\"fill\" onClick={(e) => {\n        e.stopPropagation();\n        setSelectedSaleOrder(rowData);\n        setEditSaleModalOpen(true);\n      }} />,\n      width: 1\n    })\n  } else {\n    columns.push({\n      title: 'Status',\n      dataIndex:'status',\n      render: (data) => <Tag color={statusDesign[data]}>\n        {data.toLowerCase()}\n      </Tag>\n    })\n  }\n\n  const itemsTableColumn = [\n    {\n      title: 'Item Name',\n      dataIndex: 'itemId',\n      render: (data) => <>{allItems.find((e) => e.value == data).label}</>\n    },\n    {\n      title: 'rate',\n      dataIndex: 'rate',\n    },\n    {\n      title: 'Qtn',\n      dataIndex: 'quantity',\n    },\n    {\n      title: 'unit',\n      dataIndex: 'unit',\n    }\n  ];\n\n  const handleDownload = () => {\n    if(!filteredSaleOrders?.length){\n      message.error(\"No Sale Order Found!!\");\n      return;\n    }\n    downloadExcel(filteredSaleOrders, date[0].format(\"YYYY/MM/DD\"), date[1].format(\"YYYY/MM/DD\"))\n  }\n\n  const HeaderContent = () => {\n    return (\n      <RowFlex m=\"0\" gap=\"20px\">\n        <StyledButton\n          h=\"36px\"\n          onClick={() => setAddSaleModalOpen(true)}\n          icon={<Plus size={18} color=\"#000\" />}\n          >\n          Add\n        </StyledButton>\n        <DownloadSimple size={24} color=\"#fff\" style={{ alignSelf: \"end\", margin: \"auto\" }} onClick={handleDownload} />\n      </RowFlex>\n    )\n  }\n\n  const getAllContacts = async () => {\n    try {\n      const res = await fetchAllContacts();\n      if (res.status == 200) {\n        const contactForSelect = res.data?.map((contact) => {\n          return {\n            value: contact.id,\n            label: contact.displayName || \"-\"\n          }\n        })\n        setAllContacts(contactForSelect);\n      }\n    } catch (err) {\n      handleCatch(err);\n    }\n  }\n\n  const getAllItems = async () => {\n    try {\n      const res = await fetchAllItems();\n      if (res.status == 200) {\n        const itemsMap = new Map();\n        const itemsForSelect = res.data?.map((item) => {\n          if (!itemsMap.has(item.id)) itemsMap.set(item.id, item.name);\n          return {\n            value: item.id,\n            label: item.name\n          }\n        })\n        setAllItems(itemsForSelect);\n        setItemNameToIdMap(itemsMap);\n      }\n    } catch (err) {\n      handleCatch(err);\n    }\n  }\n\n  const getAllAgents = async () => {\n    try {\n      const res = await fetchAllAgents();\n      if (res.status == 200) {\n        const AgentsForSelect = res.data?.map((agent) => {\n          return {\n            value: agent.id,\n            label: agent.displayName\n          }\n        })\n        setAllAgents(AgentsForSelect);\n      }\n    } catch (err) {\n      handleCatch(err);\n    }\n  }\n\n  const fetchOrders = async () => {\n    try {\n      const res = await fetchSalesOrder({\n        startDate: date[0].startOf('day').valueOf(),\n        endDate: date[1].endOf('day').valueOf()\n      });\n      if (res.status == 200) {\n        setSaleOrderData(res.data);\n        setFilteredSaleOrders(res.data);\n      }\n    } catch (err) {\n      handleCatch(err);\n    }\n  }\n\n  const onDateChange = (_, dates) => {\n    const dateFunc = dates.map(date => dayjs(date))\n    setDate(dateFunc);\n  }\n  const updateDate = (days) => {\n    const updatedDate = date[0].add(days, 'day');\n    setDate([updatedDate, updatedDate]);\n  };\n\n  const ItemTable = (props) => {\n    return (\n      <Table\n        bordered\n        style={{ width: '100%', marginLeft: 0 }}\n        size=\"middle\"\n        pagination={{\n          position: [\"none\", \"bottomCenter\"],\n          pageSize: 5\n        }}\n        columns={itemsTableColumn}\n        dataSource={props.itemData || []}\n      />\n    )\n  }\n\n  const clearFilter = () => {\n    setSelectedContact(null);\n    setSelectedStatus(null);\n  }\n\n  useEffect(() => {\n    // Toggle date change button visibility based on date comparison\n    setIsdateChangeBtnVisible(date[0].isSame(date[1], 'day'));\n\n    // fetch orders\n    fetchOrders();\n  }, [date]);\n\n  useEffect(() => {\n    getAllContacts();\n    getAllItems();\n    getAllAgents();\n  }, []);\n\n  return (\n    <ColFlex ai=\"center\" minH={false ? `${screenHeight}` : \"100vh\"} maxW=\"500px\" w=\"100%\" bgc=\"#fff\" style={{ position: \"relative\" }}>\n      <CommonHeader title=\"Sales\" onBack={()=>navigate(-1)} rightContent={checkAccess('EDIT_SALE_ORDER') ? <HeaderContent /> : null} />\n      <ColFlex m=\"0\" w=\"100%\" p=\"20px\" gap=\"20px\">\n        {\n          checkAccess('EDIT_SALE_ORDER') && \n          <RowFlex w=\"100%\" m=\"0\" gap=\"20px\">\n            <CaretCircleLeft size={32} color=\"#8c8c8c\" display={isdateChangeBtnVisible ? \"block\" : \"none\"} onClick={()=>updateDate(-1)} />\n            <DatePicker.RangePicker value={date} style={{ alignSelf: \"end\", width: \"100%\" }} onChange={onDateChange} format=\"YYYY/MM/DD\" popupClassName=\"yolup\" />\n            <CaretCircleRight size={32} color=\"#8c8c8c\" display={isdateChangeBtnVisible ? \"block\" : \"none\"} onClick={()=>updateDate(1)} />\n          </RowFlex>\n        }\n        <RowFlex w=\"100%\" m=\"0\" gap=\"10px\">\n          <Select\n              showSearch\n              value={selectedContact}\n              placeholder=\"customers\"\n              optionFilterProp=\"label\"\n              popupMatchSelectWidth={false}\n              filterSort={(optionA, optionB) =>\n                  (optionA?.label ?? '').toLowerCase().localeCompare((optionB?.label ?? '').toLowerCase())\n              }\n              options={allContacts}\n              style={{ minWidth: '40%', width: '100%' }}\n              onChange={(e) => setSelectedContact(e)}\n          />\n          <Select\n              value={selectedStatus}\n              options={SaleOrderStatus}\n              placeholder=\"status\"\n              style={{ width: 'fit-content'}}\n              popupMatchSelectWidth={false}\n              onChange={(newStatus) => setSelectedStatus(newStatus)}\n          />\n          <StyledButton h=\"32px\" fs=\"14px\" onClick={clearFilter}>Reset</StyledButton>\n        </RowFlex>\n        <Table\n          style={{ width: '100%' }}\n          size=\"middle\"\n          pagination={{\n            position: [\"none\", \"bottomCenter\"],\n            pageSize: 15\n          }}\n          columns={columns}\n          dataSource={filteredSaleOrders || []}\n          expandable={{\n            expandIcon: () => null,\n            expandIconColumnIndex: -1,\n            expandRowByClick: true,\n            expandedRowRender: (record) => <StyledDiv id=\"1234\" w=\"100%\">\n              <Descriptions\n                title=\"\"\n                size=\"small\"\n                style={{marginBottom: \"10px\"}}\n                layout=\"vertical\"\n                bordered\n                column={{ xs: 2 }}\n                items={[\n                  {\n                    key: '1',\n                    label: 'Agent',\n                    children: record.agentName,\n                  },{\n                    key: '2',\n                    label: 'Containers',\n                    children: record.containers?.map((e)=><>{e.type} : {e.quantity}<br/></>),\n                  },\n                  {\n                    key: '3',\n                    label: 'Total',\n                    children: `₹ ${addCommas(record.items.reduce((curr, acc) => {\n                      return curr + (acc.itemTotal || 0);\n                    }, 0))}`,\n                  }\n                ]}\n              />\n              <ItemTable itemData={record.items} />\n            </StyledDiv>\n          }}\n          rowKey={(_, i) => i}\n        />\n      </ColFlex>\n      <AddSalesOrder\n        open={addSaleModalOpen}\n        onClose={() => setAddSaleModalOpen(false)}\n        allContacts={allContacts}\n        getAllContacts={getAllContacts}\n        allItems={allItems}\n        getAllItems={getAllItems}\n        allAgents={allAgents}\n        fetchOrders={fetchOrders}\n      />\n      <EditSalesOrder\n        open={editSaleModalOpen}\n        onClose={() => setEditSaleModalOpen(false)}\n        saleOrder={selectedSaleOrder}\n        allContacts={allContacts}\n        allItems={allItems}\n        allAgents={allAgents}\n        itemNameToIdMap={itemNameToIdMap}\n      />\n    </ColFlex>\n  );\n};\n\nexport default SaleOrder;\n"],"names":["props","title","onBack","rightContent","_jsxs","RowFlex","w","h","m","p","bg","children","gap","_jsx","CaretLeft","size","color","onClick","StyledText","fs","lh","fw","ff","c","mb","statusDesign","dateTimestamp","dayjs","valueOf","open","onClose","allContacts","allItems","allAgents","fetchOrders","loading","setLoading","useState","totalAmount","setTotalAmount","form","Form","useForm","handleItemTotal","lineItems","getFieldValue","total","item","quantity","rate","Modal","footer","onCancel","styles","content","padding","style","top","StyledDiv","pos","right","fontWeight","fontSize","addCommas","labelCol","xs","span","sm","wrapperCol","initialValues","saleType","date","layout","maxWidth","margin","onFinish","async","_values$lineItems","payload","saleOrder","contactId","values","agentId","map","itemId","type","unit","itemTotal","containers","url","API_URL","request","method","data","headers","addSaleOrder","message","success","err","handleCatch","Item","name","textAlign","rules","required","getValueProps","value","Number","normalize","DatePicker","Select","showSearch","placeholder","optionFilterProp","filterSort","optionA","optionB","_optionA$label","_optionB$label","label","toLowerCase","localeCompare","options","Radio","noStyle","shouldUpdate","prevValues","currentValues","_ref","popupMatchSelectWidth","_optionA$label2","_optionB$label2","List","validator","_","names","length","Promise","reject","Error","fields","_ref2","_ref3","add","remove","errors","_Fragment","_ref4","key","restField","Space","display","align","_optionA$label3","_optionB$label3","width","Input","marginBottom","onChange","initialValue","ItemUnits","Option","prefix","MinusCircle","Button","block","icon","PlusCircle","ErrorList","_ref5","_ref6","_ref7","ContainerTypes","htmlType","StyledPillButton","styled","isActive","activeBgc","bgc","activeW","d","mr","b","br","activeC","mt","bottom","focusbgc","StyledButton","hoverbgc","React","ItemTableEditableCell","editable","dataIndex","record","itemNameToIdMap","handleSave","restProps","editing","setEditing","inputRef","useRef","useContext","EditableContext","useEffect","_inputRef$current","current","focus","toggleEdit","setFieldsValue","save","validateFields","itemDetails","get","errInfo","console","log","formField","ref","onBlur","onPressEnter","childNode","className","paddingInlineEnd","ContainerTableEditableCell","_inputRef$current2","ItemTableEditableRow","index","component","Provider","ContainerTableEditableRow","setContactId","setAgentId","setLineItems","container","setContainers","currentPage","setCurrentPage","setDate","setSaleType","handleAdd","newData","updatedLineItems","Math","ceil","row","findIndex","id","splice","handleContainerAdd","updatedContainers","handleContainerSave","containerTableColumn","onCell","render","i","filter","handleContainerDelete","columns","col","error","handleDelete","items","ColFlex","alignSelf","marginTop","e","v","optionType","target","Table","bordered","dataSource","rowClassName","pagination","position","pageSize","handleTableChange","components","body","cell","marginLeft","saleOrderData","isSame","updateSaleOrder","XLSX","require","SaleOrderStatus","ta","SaleOrder","navigate","useNavigate","setSaleOrderData","filteredSaleOrders","setFilteredSaleOrders","addSaleModalOpen","setAddSaleModalOpen","editSaleModalOpen","setEditSaleModalOpen","selectedSaleOrder","setSelectedSaleOrder","setAllContacts","setItemNameToIdMap","Map","setAllItems","setAllAgents","isdateChangeBtnVisible","setIsdateChangeBtnVisible","selectedContact","setSelectedContact","selectedStatus","setSelectedStatus","handleStatusChange","status","newStatus","updatedData","updateSalesOrderStatus","originalData","filteredValue","onFilter","checkAccess","push","stopPropagation","rowData","PencilSimple","weight","Tag","itemsTableColumn","find","handleDownload","downloadExcel","salesData","startDate","endDate","formatDate","dateString","format","salesByDate","reduce","acc","order","workbook","utils","book_new","Object","keys","forEach","dataRows","flatMap","contactName","salesOrderNumber","invoiceStatus","amount","worksheet","json_to_sheet","book_append_sheet","writeFile","HeaderContent","Plus","DownloadSimple","getAllContacts","res","fetchAllContacts","_res$data","contactForSelect","contact","displayName","getAllItems","fetchAllItems","_res$data2","itemsMap","itemsForSelect","has","set","fetchSalesOrder","startOf","endOf","updateDate","days","updatedDate","ItemTable","itemData","fetchAllAgents","_res$data3","AgentsForSelect","agent","getAllAgents","ai","minH","maxW","CommonHeader","CaretCircleLeft","RangePicker","onDateChange","dates","dateFunc","popupClassName","CaretCircleRight","minWidth","clearFilter","expandable","expandIcon","expandIconColumnIndex","expandRowByClick","expandedRowRender","_record$containers","Descriptions","column","agentName","curr","rowKey","AddSalesOrder","EditSalesOrder"],"sourceRoot":""}